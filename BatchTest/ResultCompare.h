#pragma once
#include <string>
#include <array>
#include <list>
#include <map>
#include <filesystem>

#import "progid:ResultFile.Raiden.1" named_guids

enum eDFW2DEVICETYPE
{
	DEVTYPE_UNKNOWN,
	DEVTYPE_MODEL,
	DEVTYPE_AUTOMATIC,
	DEVTYPE_NODE,
	DEVTYPE_BRANCH,
	DEVTYPE_BRANCHMEASURE,
	DEVTYPE_LRC,
	DEVTYPE_REACTOR,
	DEVTYPE_SYNCZONE,
	DEVTYPE_VOLTAGE_SOURCE,
	DEVTYPE_POWER_INJECTOR,
	DEVTYPE_GEN_INFPOWER,
	DEVTYPE_GEN_MOTION,
	DEVTYPE_GEN_DQ,
	DEVTYPE_GEN_1C,
	DEVTYPE_GEN_2C,
	DEVTYPE_GEN_3C,
	DEVTYPE_GEN_MUSTANG,
	DEVTYPE_GEN_PARK3C,
	DEVTYPE_GEN_PARK4C,
	DEVTYPE_EXCITER,
	DEVTYPE_EXCITER_MUSTANG,
	DEVTYPE_EXCCON,
	DEVTYPE_EXCCON_MUSTANG,
	DEVTYPE_DEC,
	DEVTYPE_DEC_MUSTANG,
	DEVTYPE_NODEMEASURE,
	DEVTYPE_ZEROLOADFLOW,
	DEVTYPE_TESTDEVICE,
	DEVTYPE_SCENARIO

};


enum DFWDEVICETYPE
{
	DFWTYPE_UNKNOWN,
	DFWTYPE_SYNCMACHINE,
	DFWTYPE_EXCITER,
	DFWTYPE_FORCER,
	DFWTYPE_BOILER,
	DFWTYPE_GOVERNOR,
	DFWTYPE_NODE,
	DFWTYPE_DYNAMICNETWORK,
	DFWTYPE_ARS,
	DFWTYPE_TURBINE,
	DFWTYPE_EXCONTROL,
	DFWTYPE_CUSTOMDEVICE,
	DFWTYPE_AUTOMATIC,
	DFWTYPE_NETWORK,
	DFWTYPE_EGA,
	DFWTYPE_LOAD,
	DFWTYPE_FACTS,
	DFWTYPE_PSS,
	DFWTYPE_UEL,
	DFWTYPE_OEL,
	DFWTYPE_TGOVERNOR,
	DFWTYPE_IVACTUATOR,
	DFWTYPE_GROUPVOLTAGECONTROL
};

// Перечисление подтипов устройств
enum DFWDEVICESUBTYPE
{
	DFWSUBTYPE_UNKNOWN,
	DFWSUBTYPE_SYNCMACHINE_PARK,
	DFWSUBTYPE_GOVERNOR_TYPE1,
	DFWSUBTYPE_TURBINE_TYPE1,
	DFWSUBTYPE_NODE,
	DFWSUBTYPE_SYNCMACHINE_INF_POWER,
	DFWSUBTYPE_SYNCMACHINE_CLASSIC,
	DFWSUBTYPE_SYNCMACHINE_EQS,
	DFWSUBTYPE_SYNCMACHINE_E1qE2qE2d,
	DFWSUBTYPE_SYNCMACHINE_MUST,
	DFWSUBTYPE_SYNCMACHINE_PARK1,
	DFWSUBTYPE_SYNCMACHINE_PARK3K,
	DFWSUBTYPE_SYNCMACHINE_PARK3KSAT,
	DFWSUBTYPE_SYNCMACHINE_ASTG,
	DFWSUBTYPE_DYNAMICNETWORK,
	DFWSUBTYPE_ARS_DUMMY,
	DFWSUBTYPE_ARS_ONE_DIF,
	DFWSUBTYPE_ARS_TWO_DIF,
	DFWSUBTYPE_EGA1,
	DFWSUBTYPE_EXCONT_CONST,
	DFWSUBTYPE_EXCONT_PROPORTIONAL,
	DFWSUBTYPE_EXCONT_SD,
	DFWSUBTYPE_EXCONT_SDP1,
	DFWSUBTYPE_EXCONT_SDP1M,
	DFWSUBTYPE_EXCONT_SDP1F,
	DFWSUBTYPE_EXCONT_SDP1MF,
	DFWSUBTYPE_EXCONT_M,
	DFWSUBTYPE_EXCITER_ST5B,
	DFWSUBTYPE_EXCITER_ST5B_TZ,
	DFWSUBTYPE_EXCITER_UNIVERSAL,
	DFWSUBTYPE_EXCITER_UNIVERSAL2,
	DFWSUBTYPE_EXCITER_ASTG,
	DFWSUBTYPE_PSS_2B,
	DFWSUBTYPE_UEL_2,
	DFWSUBTYPE_FORCER_UNIVERSAL,
	DFWSUBTYPE_LOAD_STATIC,
	DFWSUBTYPE_LOAD_INDUCTION_MOTOR,
	DFWSUBTYPE_LOAD_SYNCHRONOUS_MOTOR1,
	DFWSUBTYPE_LOAD_SYNCHRONOUS_MOTOR2,
	DFWSUBTYPE_LOAD_VFD_POWER,
	DFWSUBTYPE_CUSTOMDEVICE,
	DFWSUBTYPE_LASTCUSTOMDEVICE = DFWSUBTYPE_CUSTOMDEVICE + 10000,
	DFWSUBTYPE_AUTOMATIC,
	DFWSUBTYPE_BRANCH,
	DFWSUBTYPE_TURBINE_STEAM_TZ,
	DFWSUBTYPE_TURBINE_HYDRO_TZ,
	DFWSUBTYPE_GOVERNOR_STEAM_TZ,
	DFWSUBTYPE_GOVERNOR_HYDRO_TZ,
	DFWSUBTYPE_BOILER_TZ,
	DFWSUBTYPE_FACTSUPFC,
	DFWSUBTYPE_FACTSSVC,
	DFWSUBTYPE_FACTSSTATCOM,
	DFWSUBTYPE_DCCURRENT,
	DFWSUBTYPE_TURBINE_IEEESTM,
	DFWSUBTYPE_TURBINE_IVEFFECT,
	DFWSUBTYPE_ENHANCED_GOVERNOR,
	DFWSUBTYPE_ENHANCED_EHCGOVERNOR,
	DFWSUBTYPE_BOILER_FAW,
	DFWSUBTYPE_TGOVERNOR_5,
	DFWSUBTYPE_TGOVERNOR_IEEE,
	DFWSUBTYPE_OEL,
	DFWSUBTYPE_TURBINE_GTROWAN,
	DFWSUBTYPE_TURBINE_GTHANNETT,
	DFWSUBTYPE_TURBINE_GTCIGRE,
	DFWSUBTYPE_TURBINE_GTGAST,
	DFWSUBTYPE_TURBINE_GTHRSG,
	DFWSUBTYPE_DIESELDRIVE_SIMPLE,
	DFWSUBTYPE_TURBINE_COMBINEDCYCLE,
	DFWSUBTYPE_IVACTUATOR_IMPULSE,
	DFWSUBTYPE_IEEE421_DC1A,
	DFWSUBTYPE_IEEE421_DC2A,
	DFWSUBTYPE_IEEE421_DC3A,
	DFWSUBTYPE_IEEE421_DC4B,
	DFWSUBTYPE_IEEE421_AC1A,
	DFWSUBTYPE_IEEE421_AC2A,
	DFWSUBTYPE_IEEE421_AC3A,
	DFWSUBTYPE_IEEE421_AC4A,
	DFWSUBTYPE_IEEE421_AC5A,
	DFWSUBTYPE_IEEE421_AC6A,
	DFWSUBTYPE_IEEE421_AC7B,
	DFWSUBTYPE_IEEE421_AC8B,
	DFWSUBTYPE_IEEE421_AC9C,
	DFWSUBTYPE_IEEE421_ST1A,
	DFWSUBTYPE_IEEE421_ST2A,
	DFWSUBTYPE_IEEE421_ST3A,
	DFWSUBTYPE_IEEE421_ST4B,
	DFWSUBTYPE_IEEE421_ST5B,
	DFWSUBTYPE_IEEE421_ST6B,
	DFWSUBTYPE_IEEE421_ST7B,
	DFWSUBTYPE_IEEE421_ST9C,
	DFWSUBTYPE_IEEE421_PSS1A,
	DFWSUBTYPE_IEEE421_PSS2B,
	DFWSUBTYPE_IEEE421_PSS3B,
	DFWSUBTYPE_IEEE421_PSS4B,
	DFWSUBTYPE_IEEE421_UEL1,
	DFWSUBTYPE_IEEE421_UEL2,
	DFWSUBTYPE_IEEE421_OELUNITROL,
	DFWSUBTYPE_THYNE_1,
	DFWSUBTYPE_THYNE_4,
	DFWSUBTYPE_DECS400,
	DFWSUBTYPE_DEC_NIIPT,
	DFWSUBTYPE_OEL_NIIPT,
	DFWSUBTYPE_UEL_NIIPT,
	DFWSUBTYPE_EXCONT_ARVM_NIIPT,
	DFWSUBTYPE_EXCONT_KOSUR_NIIPT,
	DFWSUBTYPE_DCVOLTAGE,
	DFWSUBTYPE_VGREACTOR,
	DFWSUBTYPE_GROUPVOLTATECONTROL_COSINE,
	DFWSUBTYPE_EXCONT_PROPORTIONALVCGROUP,
	DFWSUBTYPE_AUTOMATION = 50000,
	DFWSUBTYPE_SCENARIO
};

class ResultCompare
{
public:
	struct TypeMap
	{
		struct
		{
			long Type;
			long SubType;
		}
		RUSTab;
		long Raiden;
	};

	struct ComparedDevices
	{
		long DeviceId;
		std::string DeviceName;
		ResultFileLib::ICompareResultPtr CompareResult;
	};

	struct ComparedVariables
	{
		long DeviceTypeId;
		std::string DeviceTypeVerbal;
		std::string VariableName1;
		std::string VariableName2;
		std::map<double, ComparedDevices, std::greater<double> > Ordered;
	};

	using CompareResultsT = std::list <ComparedVariables>;

	CompareResultsT Compare(const std::filesystem::path& ResultPath1, const std::filesystem::path& ResultPath2);


	static constexpr const std::array<TypeMap, 4> DeviceTypeMap =
	{{
		{{DFWTYPE_SYNCMACHINE, DFWSUBTYPE_SYNCMACHINE_PARK3K}, DEVTYPE_GEN_PARK3C},
		{{DFWTYPE_SYNCMACHINE, DFWSUBTYPE_SYNCMACHINE_INF_POWER}, DEVTYPE_GEN_INFPOWER},
		{{DFWTYPE_SYNCMACHINE, DFWSUBTYPE_SYNCMACHINE_CLASSIC}, DEVTYPE_GEN_MOTION},
		{{DFWTYPE_EXCITER, DFWSUBTYPE_EXCITER_UNIVERSAL}, DEVTYPE_EXCITER_MUSTANG},
	}};
};


