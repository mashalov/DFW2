%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP966.tmp.pdf
%%Creator: Adobe Acrobat 17.12.0
%%For: Bug
%%CreationDate: 08.09.2017, 3:35:49
%%BoundingBox: 0 0 160 77
%%HiResBoundingBox: 0 0 160 77
%%CropBox: 0 0 160 77
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 914 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="CorelDRAW X5"
   xmp:ModifyDate="2017-09-08T03:35:21+05:00"
   xmp:CreateDate="2017-09-08T03:35:21+05:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 17.0 (Windows)"
   xmpMM:DocumentID="uuid:6cb6acdc-0abf-4c50-bca2-21ba0babdcbe"
   xmpMM:InstanceID="uuid:d41c5fa2-6de5-4da7-9fb6-a154a0359263">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">piline.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -77 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 77 li
160 77 li
160 0 li
cp
clp
.709 lw
0 lc
0 lj
22.926 ml
[] 0 dsh
true sadj
-.13062 18.847 mo
160.367 18.847 li
false sop
.753902 .684596 .660151 .89221 cmyk
@
24.569 76.7955 mo
24.569 18.8465 li
@
134.944 76.7955 mo
134.944 18.8465 li
@
19.069 76.7955 mo
30.069 76.7955 li
@
129.444 76.7955 mo
140.444 76.7955 li
@
41.771 15.795 mo
63.365 15.795 li
63.365 21.8981 li
41.771 21.8981 li
cp
0 0 0 0 cmyk
ef
41.771 15.795 mo
63.365 15.795 li
63.365 21.8981 li
41.771 21.8981 li
cp
.753902 .684596 .660151 .89221 cmyk
@
27.621 58.618 mo
21.518 58.618 li
21.518 37.024 li
27.621 37.024 li
cp
21.518 58.618 mo
cp
0 0 0 0 cmyk
ef
27.621 58.618 mo
21.518 58.618 li
21.518 37.024 li
27.621 37.024 li
cp
21.518 58.618 mo
cp
.753902 .684596 .660151 .89221 cmyk
@
137.996 58.618 mo
131.893 58.618 li
131.893 37.024 li
137.996 37.024 li
cp
131.893 58.618 mo
cp
0 0 0 0 cmyk
ef
137.996 58.618 mo
131.893 58.618 li
131.893 37.024 li
137.996 37.024 li
cp
131.893 58.618 mo
cp
.753902 .684596 .660151 .89221 cmyk
@
104.369 12.274 mo
107.999 12.274 110.941 15.216 110.941 18.846 cv
110.941 22.476 107.999 25.418 104.369 25.418 cv
100.739 25.418 97.797 22.476 97.797 18.846 cv
97.797 15.216 100.739 12.274 104.369 12.274 cv
cp
0 0 0 0 cmyk
ef
104.369 12.274 mo
107.999 12.274 110.941 15.216 110.941 18.846 cv
110.941 22.476 107.999 25.418 104.369 25.418 cv
100.739 25.418 97.797 22.476 97.797 18.846 cv
97.797 15.216 100.739 12.274 104.369 12.274 cv
cp
.753902 .684596 .660151 .89221 cmyk
@
112.642 12.274 mo
116.272 12.274 119.214 15.216 119.214 18.846 cv
119.214 22.476 116.272 25.418 112.642 25.418 cv
109.012 25.418 106.07 22.476 106.07 18.846 cv
106.07 15.216 109.012 12.274 112.642 12.274 cv
cp
0 0 0 0 cmyk
ef
112.642 12.274 mo
116.272 12.274 119.214 15.216 119.214 18.846 cv
119.214 22.476 116.272 25.418 112.642 25.418 cv
109.012 25.418 106.07 22.476 106.07 18.846 cv
106.07 15.216 109.012 12.274 112.642 12.274 cv
cp
.753902 .684596 .660151 .89221 cmyk
@
104.369 12.274 mo
107.999 12.274 110.941 15.216 110.941 18.846 cv
110.941 22.476 107.999 25.418 104.369 25.418 cv
100.739 25.418 97.797 22.476 97.797 18.846 cv
97.797 15.216 100.739 12.274 104.369 12.274 cv
cp
@
24.569 17.722 mo
25.19 17.722 25.694 18.226 25.694 18.847 cv
25.694 19.468 25.19 19.972 24.569 19.972 cv
23.948 19.972 23.444 19.468 23.444 18.847 cv
23.444 18.226 23.948 17.722 24.569 17.722 cv
ef
88.671 17.722 mo
89.292 17.722 89.796 18.226 89.796 18.847 cv
89.796 19.468 89.292 19.972 88.671 19.972 cv
88.05 19.972 87.546 19.468 87.546 18.847 cv
87.546 18.226 88.05 17.722 88.671 17.722 cv
ef
134.945 17.722 mo
135.566 17.722 136.07 18.226 136.07 18.847 cv
136.07 19.468 135.566 19.972 134.945 19.972 cv
134.324 19.972 133.82 19.468 133.82 18.847 cv
133.82 18.226 134.324 17.722 134.945 17.722 cv
ef
134.71 7.697 mo
134.709 7.642 134.695 7.59 134.668 7.543 cv
134.64 7.495 134.602 7.456 134.554 7.42599 cv
134.508 7.396 134.454 7.381 134.393 7.38 cv
134.325 7.381 134.268 7.397 134.219 7.429 cv
134.171 7.461 134.134 7.501 134.109 7.549 cv
134.083 7.596 134.07 7.646 134.07 7.697 cv
134.071 7.752 134.085 7.803 134.113 7.85 cv
134.14 7.89799 134.178 7.937 134.226 7.967 cv
134.273 7.997 134.327 8.013 134.387 8.014 cv
134.455 8.013 134.513 7.996 134.562 7.965 cv
134.609 7.933 134.646 7.893 134.671 7.846 cv
134.697 7.798 134.71 7.748 134.71 7.697 cv
f
135.656 9.435 mo
135.67 9.373 135.69 9.317 135.715 9.264 cv
135.74 9.212 135.775 9.168 135.821 9.128 cv
135.868 9.089 135.93 9.058 136.008 9.034 cv
136.084 9.01099 136.183 8.99699 136.301 8.993 cv
136.312 8.993 136.325 8.991 136.341 8.987 cv
136.357 8.98299 136.371 8.972 136.383 8.95499 cv
136.396 8.937 136.402 8.91 136.403 8.873 cv
136.403 8.87 136.402 8.864 136.4 8.853 cv
136.398 8.84299 136.391 8.833 136.38 8.823 cv
136.369 8.813 136.35 8.808 136.325 8.807 cv
136.227 8.808 136.125 8.811 136.023 8.81599 cv
135.92 8.821 135.817 8.824 135.716 8.825 cv
135.613 8.824 135.508 8.821 135.403 8.81599 cv
135.296 8.811 135.194 8.808 135.094 8.807 cv
135.081 8.806 135.067 8.808 135.05 8.811 cv
135.033 8.81499 135.019 8.825 135.006 8.842 cv
134.993 8.859 134.987 8.888 134.986 8.92699 cv
134.987 8.958 134.999 8.977 135.022 8.985 cv
135.044 8.991 135.068 8.994 135.094 8.993 cv
135.206 8.995 135.292 9.009 135.351 9.034 cv
135.41 9.059 135.45 9.091 135.47 9.13 cv
135.491 9.169 135.502 9.211 135.5 9.256 cv
135.5 9.262 135.499 9.27499 135.497 9.292 cv
135.496 9.309 135.492 9.327 135.489 9.34399 cv
135.488 9.362 135.485 9.374 135.482 9.381 cv
134.945 11.515 li
134.892 11.716 134.814 11.897 134.71 12.059 cv
134.607 12.221 134.485 12.36 134.348 12.476 cv
134.21 12.592 134.066 12.681 133.912 12.743 cv
133.759 12.804 133.606 12.835 133.456 12.836 cv
133.319 12.836 133.196 12.807 133.086 12.748 cv
132.977 12.691 132.89 12.604 132.825 12.489 cv
132.761 12.374 132.728 12.23 132.727 12.059 cv
132.727 12.054 132.727 12.032 132.729 11.991 cv
132.731 11.95 132.737 11.897 132.747 11.828 cv
132.756 11.759 132.771 11.681 132.792 11.593 cv
133.372 9.267 li
133.384 9.214 133.398 9.169 133.412 9.134 cv
133.426 9.098 133.449 9.07 133.48 9.049 cv
133.511 9.028 133.558 9.013 133.619 9.006 cv
133.681 8.99599 133.767 8.993 133.874 8.993 cv
133.926 8.994 133.966 8.991 133.996 8.988 cv
134.026 8.985 134.047 8.974 134.06 8.957 cv
134.072 8.939 134.078 8.91199 134.078 8.873 cv
134.077 8.851 134.071 8.836 134.06 8.826 cv
134.049 8.817 134.037 8.811 134.024 8.809 cv
134.011 8.807 134.001 8.807 133.994 8.807 cv
133.951 8.807 133.895 8.808 133.828 8.81 cv
133.76 8.812 133.687 8.814 133.611 8.81599 cv
133.536 8.818 133.463 8.82 133.395 8.822 cv
133.327 8.824 133.272 8.825 133.229 8.825 cv
133.184 8.825 133.128 8.824 133.059 8.822 cv
132.992 8.82 132.919 8.818 132.843 8.81599 cv
132.768 8.814 132.695 8.811 132.627 8.81 cv
132.558 8.808 132.502 8.807 132.458 8.807 cv
132.442 8.806 132.425 8.808 132.407 8.811 cv
132.39 8.81499 132.375 8.825 132.363 8.842 cv
132.351 8.859 132.345 8.888 132.344 8.92699 cv
132.344 8.958 132.358 8.977 132.385 8.985 cv
132.413 8.991 132.455 8.994 132.512 8.993 cv
132.516 8.993 132.531 8.993 132.553 8.993 cv
132.576 8.994 132.604 8.994 132.637 8.995 cv
132.67 8.99699 132.704 9 132.739 9.004 cv
132.792 9.009 132.832 9.016 132.859 9.027 cv
132.886 9.03799 132.9 9.062 132.9 9.1 cv
132.9 9.11 132.896 9.13 132.889 9.16199 cv
132.882 9.194 132.873 9.231 132.862 9.27499 cv
132.852 9.317 132.841 9.361 132.829 9.405 cv
132.819 9.45 132.807 9.489 132.798 9.52499 cv
132.667 10.051 li
132.658 10.09 132.643 10.151 132.623 10.233 cv
132.603 10.315 132.58 10.407 132.553 10.512 cv
132.527 10.616 132.5 10.723 132.474 10.834 cv
132.446 10.943 132.42 11.048 132.396 11.145 cv
132.371 11.243 132.35 11.327 132.334 11.395 cv
132.317 11.462 132.306 11.506 132.302 11.527 cv
132.282 11.609 132.27 11.676 132.265 11.729 cv
132.262 11.782 132.26 11.831 132.261 11.874 cv
132.262 12.056 132.293 12.218 132.355 12.361 cv
132.417 12.502 132.502 12.623 132.611 12.72 cv
132.72 12.819 132.843 12.894 132.984 12.945 cv
133.124 12.996 133.274 13.021 133.432 13.021 cv
133.621 13.019 133.807 12.981 133.986 12.904 cv
134.166 12.826 134.333 12.72 134.486 12.585 cv
134.639 12.449 134.772 12.294 134.882 12.119 cv
134.992 11.942 135.073 11.755 135.124 11.557 cv
135.656 9.435 li
f
136.879 12.833 mo
136.909 12.833 136.95 12.832 137.002 12.83 cv
137.054 12.829 137.111 12.825 137.175 12.819 cv
137.239 12.813 137.303 12.804 137.369 12.792 cv
137.434 12.781 137.496 12.764 137.553 12.745 cv
137.629 12.717 137.692 12.685 137.741 12.649 cv
137.789 12.612 137.827 12.574 137.853 12.534 cv
137.879 12.493 137.897 12.454 137.907 12.415 cv
137.917 12.377 137.922 12.342 137.921 12.31 cv
137.92 12.232 137.896 12.167 137.85 12.112 cv
137.805 12.057 137.743 12.015 137.665 11.986 cv
137.587 11.957 137.499 11.941 137.402 11.941 cv
137.3 11.941 137.196 11.957 137.087 11.988 cv
136.978 12.017 136.872 12.063 136.77 12.123 cv
136.667 12.183 136.575 12.257 136.493 12.345 cv
136.41 12.434 136.346 12.536 136.296 12.653 cv
136.248 12.769 136.223 12.899 136.222 13.042 cv
136.222 13.149 136.239 13.249 136.271 13.343 cv
136.304 13.438 136.352 13.521 136.415 13.593 cv
136.479 13.666 136.558 13.723 136.651 13.765 cv
136.744 13.806 136.852 13.828 136.975 13.829 cv
137.117 13.827 137.243 13.813 137.354 13.785 cv
137.466 13.757 137.563 13.722 137.646 13.679 cv
137.728 13.636 137.797 13.592 137.851 13.548 cv
137.906 13.502 137.946 13.463 137.973 13.428 cv
138 13.393 138.013 13.368 138.013 13.356 cv
138.013 13.347 138.009 13.337 138.002 13.326 cv
137.995 13.315 137.986 13.306 137.975 13.297 cv
137.964 13.29 137.953 13.285 137.942 13.285 cv
137.93 13.284 137.92 13.287 137.912 13.293 cv
137.903 13.299 137.891 13.31 137.875 13.326 cv
137.808 13.403 137.739 13.465 137.664 13.514 cv
137.59 13.563 137.516 13.601 137.442 13.628 cv
137.368 13.656 137.299 13.675 137.236 13.687 cv
137.173 13.699 137.118 13.706 137.073 13.709 cv
137.03 13.711 136.999 13.712 136.984 13.711 cv
136.899 13.711 136.826 13.693 136.763 13.656 cv
136.701 13.618 136.652 13.562 136.618 13.487 cv
136.583 13.412 136.566 13.318 136.565 13.205 cv
136.565 13.186 136.565 13.163 136.567 13.134 cv
136.569 13.105 136.573 13.066 136.58 13.018 cv
136.588 12.971 136.599 12.909 136.615 12.833 cv
136.879 12.833 li
cp
136.649 12.716 mo
136.684 12.595 136.728 12.495 136.782 12.415 cv
136.835 12.334 136.893 12.27 136.954 12.222 cv
137.016 12.174 137.076 12.139 137.136 12.115 cv
137.195 12.091 137.249 12.076 137.295 12.068 cv
137.342 12.062 137.378 12.058 137.402 12.059 cv
137.464 12.059 137.52 12.068 137.572 12.089 cv
137.623 12.108 137.664 12.137 137.694 12.174 cv
137.725 12.211 137.74 12.257 137.741 12.31 cv
137.74 12.377 137.722 12.434 137.688 12.481 cv
137.653 12.527 137.608 12.566 137.551 12.596 cv
137.494 12.625 137.432 12.648 137.365 12.665 cv
137.297 12.682 137.23 12.694 137.164 12.7 cv
137.097 12.708 137.037 12.712 136.982 12.714 cv
136.928 12.716 136.885 12.716 136.854 12.716 cv
136.649 12.716 li
f
90.581 7.697 mo
90.58 7.642 90.566 7.59 90.539 7.543 cv
90.511 7.495 90.473 7.456 90.425 7.42599 cv
90.379 7.396 90.325 7.381 90.264 7.38 cv
90.196 7.381 90.139 7.397 90.09 7.429 cv
90.042 7.461 90.005 7.501 89.98 7.549 cv
89.954 7.596 89.941 7.646 89.941 7.697 cv
89.942 7.752 89.956 7.803 89.984 7.85 cv
90.011 7.89799 90.049 7.937 90.097 7.967 cv
90.144 7.997 90.197 8.013 90.258 8.014 cv
90.326 8.013 90.384 7.996 90.432 7.965 cv
90.48 7.933 90.517 7.893 90.542 7.846 cv
90.568 7.798 90.581 7.748 90.581 7.697 cv
f
91.527 9.435 mo
91.541 9.373 91.561 9.317 91.586 9.264 cv
91.611 9.212 91.647 9.168 91.693 9.128 cv
91.739 9.089 91.801 9.058 91.879 9.034 cv
91.956 9.01099 92.054 8.99699 92.172 8.993 cv
92.184 8.993 92.197 8.991 92.213 8.987 cv
92.229 8.98299 92.242 8.972 92.254 8.95499 cv
92.267 8.937 92.273 8.91 92.274 8.873 cv
92.274 8.87 92.273 8.864 92.271 8.853 cv
92.269 8.84299 92.262 8.833 92.251 8.823 cv
92.24 8.813 92.221 8.808 92.197 8.807 cv
92.098 8.808 91.996 8.811 91.894 8.81599 cv
91.791 8.821 91.689 8.824 91.587 8.825 cv
91.484 8.824 91.38 8.821 91.274 8.81599 cv
91.167 8.811 91.065 8.808 90.965 8.807 cv
90.952 8.806 90.938 8.808 90.921 8.811 cv
90.904 8.81499 90.89 8.825 90.878 8.842 cv
90.865 8.859 90.859 8.888 90.857 8.92699 cv
90.859 8.958 90.871 8.977 90.893 8.985 cv
90.915 8.991 90.939 8.994 90.965 8.993 cv
91.078 8.995 91.164 9.009 91.222 9.034 cv
91.281 9.059 91.321 9.091 91.342 9.13 cv
91.363 9.169 91.373 9.211 91.372 9.256 cv
91.372 9.262 91.371 9.27499 91.369 9.292 cv
91.367 9.309 91.364 9.327 91.361 9.34399 cv
91.359 9.362 91.356 9.374 91.353 9.381 cv
90.816 11.515 li
90.763 11.716 90.685 11.897 90.582 12.059 cv
90.478 12.221 90.357 12.36 90.219 12.476 cv
90.081 12.592 89.937 12.681 89.784 12.743 cv
89.63 12.804 89.478 12.835 89.327 12.836 cv
89.19 12.836 89.067 12.807 88.958 12.748 cv
88.848 12.691 88.762 12.604 88.697 12.489 cv
88.632 12.374 88.599 12.23 88.598 12.059 cv
88.598 12.054 88.598 12.032 88.6 11.991 cv
88.602 11.95 88.608 11.897 88.618 11.828 cv
88.627 11.759 88.642 11.681 88.664 11.593 cv
89.244 9.267 li
89.256 9.214 89.27 9.169 89.283 9.134 cv
89.297 9.098 89.32 9.07 89.351 9.049 cv
89.382 9.028 89.429 9.013 89.491 9.006 cv
89.552 8.99599 89.638 8.993 89.746 8.993 cv
89.798 8.994 89.837 8.991 89.867 8.988 cv
89.897 8.985 89.918 8.974 89.931 8.957 cv
89.943 8.939 89.949 8.91199 89.949 8.873 cv
89.948 8.851 89.942 8.836 89.931 8.826 cv
89.92 8.817 89.908 8.811 89.895 8.809 cv
89.882 8.807 89.872 8.807 89.865 8.807 cv
89.823 8.807 89.767 8.808 89.699 8.81 cv
89.631 8.812 89.558 8.814 89.483 8.81599 cv
89.407 8.818 89.334 8.82 89.267 8.822 cv
89.199 8.824 89.143 8.825 89.1 8.825 cv
89.055 8.825 89 8.824 88.931 8.822 cv
88.863 8.82 88.79 8.818 88.715 8.81599 cv
88.639 8.814 88.566 8.811 88.498 8.81 cv
88.43 8.808 88.374 8.807 88.329 8.807 cv
88.313 8.806 88.296 8.808 88.278 8.811 cv
88.261 8.81499 88.246 8.825 88.234 8.842 cv
88.222 8.859 88.216 8.888 88.216 8.92699 cv
88.216 8.958 88.229 8.977 88.256 8.985 cv
88.284 8.991 88.326 8.994 88.383 8.993 cv
88.388 8.993 88.402 8.993 88.425 8.993 cv
88.448 8.994 88.475 8.994 88.508 8.995 cv
88.541 8.99699 88.575 9 88.61 9.004 cv
88.664 9.009 88.704 9.016 88.731 9.027 cv
88.757 9.03799 88.771 9.062 88.771 9.1 cv
88.771 9.11 88.767 9.13 88.76 9.16199 cv
88.754 9.194 88.744 9.231 88.733 9.27499 cv
88.724 9.317 88.712 9.361 88.701 9.405 cv
88.69 9.45 88.679 9.489 88.67 9.52499 cv
88.538 10.051 li
88.529 10.09 88.514 10.151 88.495 10.233 cv
88.475 10.315 88.452 10.407 88.425 10.512 cv
88.399 10.616 88.372 10.723 88.345 10.834 cv
88.317 10.943 88.291 11.048 88.267 11.145 cv
88.242 11.243 88.222 11.327 88.205 11.395 cv
88.189 11.462 88.178 11.506 88.174 11.527 cv
88.154 11.609 88.142 11.676 88.137 11.729 cv
88.133 11.782 88.131 11.831 88.132 11.874 cv
88.133 12.056 88.165 12.218 88.226 12.361 cv
88.288 12.502 88.374 12.623 88.483 12.72 cv
88.591 12.819 88.715 12.894 88.855 12.945 cv
88.995 12.996 89.145 13.021 89.303 13.021 cv
89.493 13.019 89.678 12.981 89.857 12.904 cv
90.038 12.826 90.204 12.72 90.357 12.585 cv
90.511 12.449 90.643 12.294 90.753 12.119 cv
90.864 11.942 90.944 11.755 90.995 11.557 cv
91.527 9.435 li
f
92.749 12.833 mo
92.779 12.833 92.82 12.832 92.872 12.83 cv
92.924 12.829 92.981 12.825 93.045 12.819 cv
93.109 12.813 93.173 12.804 93.239 12.792 cv
93.304 12.781 93.366 12.764 93.423 12.745 cv
93.499 12.717 93.562 12.685 93.611 12.649 cv
93.659 12.612 93.697 12.574 93.723 12.534 cv
93.749 12.493 93.767 12.454 93.777 12.415 cv
93.787 12.377 93.792 12.342 93.791 12.31 cv
93.79 12.232 93.766 12.167 93.72 12.112 cv
93.674 12.057 93.613 12.015 93.535 11.986 cv
93.457 11.957 93.37 11.941 93.272 11.941 cv
93.17 11.941 93.066 11.957 92.957 11.988 cv
92.848 12.017 92.742 12.063 92.64 12.123 cv
92.538 12.183 92.445 12.257 92.363 12.345 cv
92.28 12.434 92.216 12.536 92.166 12.653 cv
92.118 12.769 92.093 12.899 92.092 13.042 cv
92.092 13.149 92.109 13.249 92.141 13.343 cv
92.174 13.438 92.222 13.521 92.285 13.593 cv
92.348 13.666 92.428 13.723 92.521 13.765 cv
92.614 13.806 92.722 13.828 92.845 13.829 cv
92.987 13.827 93.113 13.813 93.225 13.785 cv
93.336 13.757 93.433 13.722 93.516 13.679 cv
93.598 13.636 93.667 13.592 93.721 13.548 cv
93.776 13.502 93.816 13.463 93.843 13.428 cv
93.87 13.393 93.883 13.368 93.883 13.356 cv
93.883 13.347 93.879 13.337 93.872 13.326 cv
93.865 13.315 93.856 13.306 93.845 13.297 cv
93.834 13.29 93.823 13.285 93.812 13.285 cv
93.8 13.284 93.79 13.287 93.782 13.293 cv
93.773 13.299 93.761 13.31 93.745 13.326 cv
93.679 13.403 93.609 13.465 93.534 13.514 cv
93.46 13.563 93.386 13.601 93.312 13.628 cv
93.238 13.656 93.169 13.675 93.106 13.687 cv
93.043 13.699 92.988 13.706 92.943 13.709 cv
92.899 13.711 92.869 13.712 92.854 13.711 cv
92.769 13.711 92.696 13.693 92.633 13.656 cv
92.571 13.618 92.522 13.562 92.488 13.487 cv
92.453 13.412 92.436 13.318 92.435 13.205 cv
92.435 13.186 92.435 13.163 92.437 13.134 cv
92.439 13.105 92.443 13.066 92.45 13.018 cv
92.457 12.971 92.469 12.909 92.485 12.833 cv
92.749 12.833 li
cp
92.519 12.716 mo
92.554 12.595 92.598 12.495 92.652 12.415 cv
92.705 12.334 92.763 12.27 92.824 12.222 cv
92.886 12.174 92.946 12.139 93.006 12.115 cv
93.065 12.091 93.119 12.076 93.165 12.068 cv
93.212 12.062 93.248 12.058 93.272 12.059 cv
93.334 12.059 93.39 12.068 93.441 12.089 cv
93.493 12.108 93.534 12.137 93.564 12.174 cv
93.595 12.211 93.61 12.257 93.611 12.31 cv
93.61 12.377 93.592 12.434 93.558 12.481 cv
93.523 12.527 93.478 12.566 93.421 12.596 cv
93.364 12.625 93.302 12.648 93.235 12.665 cv
93.167 12.682 93.101 12.694 93.034 12.7 cv
92.967 12.708 92.907 12.712 92.852 12.714 cv
92.798 12.716 92.755 12.716 92.724 12.716 cv
92.519 12.716 li
f
109.134 .767998 mo
109.133 .712997 109.119 .660995 109.092 .612999 cv
109.064 .565994 109.026 .527 108.979 .496994 cv
108.932 .466995 108.878 .451996 108.817 .450996 cv
108.749 .451996 108.692 .467995 108.643 .5 cv
108.595 .531998 108.558 .571999 108.533 .618996 cv
108.508 .667 108.495 .716995 108.495 .767998 cv
108.495 .822998 108.509 .874001 108.537 .920998 cv
108.564 .968994 108.602 1.008 108.65 1.03799 cv
108.697 1.068 108.75 1.084 108.811 1.085 cv
108.879 1.084 108.937 1.067 108.985 1.036 cv
109.033 1.004 109.07 .963997 109.095 .917 cv
109.121 .868996 109.134 .819 109.134 .767998 cv
f
108.775 3.547 mo
108.771 3.53699 108.765 3.52299 108.758 3.505 cv
108.75 3.487 108.746 3.473 108.745 3.463 cv
108.746 3.46 108.756 3.451 108.775 3.435 cv
108.795 3.419 108.818 3.402 108.845 3.382 cv
108.871 3.361 108.895 3.34299 108.919 3.326 cv
109.965 2.519 li
110.104 2.416 110.226 2.336 110.328 2.27599 cv
110.432 2.217 110.521 2.172 110.595 2.143 cv
110.67 2.114 110.735 2.09499 110.79 2.084 cv
110.845 2.074 110.895 2.06699 110.939 2.06499 cv
110.955 2.062 110.972 2.06 110.988 2.055 cv
111.005 2.049 111.019 2.03899 111.03 2.02299 cv
111.041 2.006 111.047 1.98 111.047 1.945 cv
111.047 1.932 111.042 1.918 111.032 1.903 cv
111.022 1.888 111.005 1.88 110.981 1.879 cv
110.915 1.88 110.845 1.883 110.774 1.888 cv
110.701 1.893 110.629 1.896 110.557 1.897 cv
110.448 1.896 110.337 1.893 110.225 1.888 cv
110.112 1.883 110.002 1.88 109.893 1.879 cv
109.878 1.878 109.862 1.88 109.845 1.883 cv
109.827 1.88699 109.812 1.897 109.799 1.91399 cv
109.786 1.931 109.78 1.96 109.779 1.999 cv
109.779 2.02 109.786 2.035 109.799 2.045 cv
109.812 2.055 109.83 2.062 109.851 2.06499 cv
109.917 2.07 109.964 2.08099 109.994 2.1 cv
110.023 2.119 110.038 2.14899 110.036 2.18999 cv
110.035 2.217 110.027 2.245 110.008 2.27399 cv
109.99 2.30299 109.968 2.33099 109.943 2.356 cv
109.917 2.382 109.893 2.405 109.87 2.424 cv
109.847 2.443 109.831 2.457 109.821 2.465 cv
107.49 4.258 li
107.968 2.339 li
107.98 2.286 107.994 2.241 108.008 2.20599 cv
108.022 2.17 108.045 2.142 108.076 2.12099 cv
108.107 2.1 108.153 2.085 108.215 2.078 cv
108.277 2.068 108.363 2.06499 108.47 2.06499 cv
108.52 2.06599 108.56 2.064 108.59 2.06 cv
108.62 2.057 108.641 2.046 108.654 2.028 cv
108.668 2.01199 108.674 1.98399 108.674 1.945 cv
108.673 1.919 108.662 1.90099 108.646 1.892 cv
108.628 1.883 108.609 1.878 108.59 1.879 cv
108.547 1.879 108.491 1.88 108.423 1.882 cv
108.356 1.884 108.283 1.88599 108.207 1.888 cv
108.132 1.89 108.059 1.892 107.991 1.894 cv
107.923 1.896 107.868 1.897 107.825 1.897 cv
107.78 1.897 107.724 1.896 107.655 1.894 cv
107.588 1.892 107.515 1.89 107.439 1.888 cv
107.363 1.88599 107.29 1.883 107.223 1.882 cv
107.154 1.88 107.098 1.879 107.054 1.879 cv
107.038 1.878 107.023 1.88 107.004 1.883 cv
106.986 1.88699 106.97 1.897 106.956 1.91299 cv
106.942 1.929 106.935 1.95599 106.934 1.993 cv
106.934 2.02599 106.948 2.047 106.976 2.055 cv
107.004 2.062 107.048 2.06599 107.107 2.06499 cv
107.147 2.06499 107.191 2.06599 107.238 2.068 cv
107.285 2.07 107.327 2.074 107.364 2.076 cv
107.412 2.08099 107.446 2.09 107.466 2.104 cv
107.487 2.117 107.497 2.14 107.496 2.172 cv
107.496 2.183 107.494 2.196 107.491 2.211 cv
107.487 2.226 107.481 2.251 107.472 2.286 cv
106.671 5.49599 li
106.657 5.55299 106.643 5.601 106.627 5.638 cv
106.611 5.675 106.587 5.70399 106.553 5.724 cv
106.52 5.744 106.47 5.758 106.403 5.766 cv
106.335 5.77399 106.244 5.776 106.127 5.776 cv
106.093 5.776 106.063 5.778 106.038 5.781 cv
106.014 5.784 105.994 5.795 105.981 5.81 cv
105.967 5.826 105.96 5.853 105.96 5.89 cv
105.96 5.91399 105.967 5.93 105.979 5.94099 cv
105.991 5.951 106.004 5.957 106.018 5.959 cv
106.032 5.961 106.042 5.962 106.049 5.962 cv
106.092 5.962 106.148 5.961 106.215 5.959 cv
106.283 5.957 106.353 5.95499 106.429 5.953 cv
106.505 5.951 106.575 5.949 106.643 5.947 cv
106.71 5.945 106.766 5.944 106.808 5.944 cv
106.871 5.944 106.935 5.945 107 5.947 cv
107.065 5.949 107.128 5.95 107.191 5.95 cv
107.257 5.95 107.323 5.952 107.387 5.95599 cv
107.453 5.959 107.517 5.961 107.58 5.962 cv
107.595 5.963 107.611 5.961 107.63 5.957 cv
107.647 5.95399 107.663 5.94299 107.677 5.92599 cv
107.691 5.909 107.698 5.881 107.699 5.842 cv
107.699 5.81 107.685 5.791 107.658 5.784 cv
107.63 5.778 107.589 5.776 107.532 5.776 cv
107.457 5.778 107.391 5.776 107.332 5.77299 cv
107.275 5.77 107.229 5.75999 107.195 5.745 cv
107.161 5.73 107.144 5.70399 107.143 5.669 cv
107.143 5.654 107.147 5.632 107.153 5.602 cv
107.159 5.572 107.167 5.53899 107.175 5.505 cv
107.183 5.46999 107.191 5.437 107.197 5.406 cv
107.239 5.251 107.28 5.09399 107.319 4.937 cv
107.359 4.779 107.397 4.62299 107.436 4.467 cv
108.327 3.77399 li
109.02 5.382 li
109.044 5.435 109.06 5.474 109.071 5.5 cv
109.081 5.52599 109.087 5.545 109.089 5.557 cv
109.092 5.569 109.092 5.57999 109.092 5.591 cv
109.091 5.63599 109.077 5.671 109.051 5.696 cv
109.025 5.721 108.993 5.74 108.956 5.752 cv
108.92 5.763 108.886 5.77 108.853 5.77299 cv
108.82 5.776 108.796 5.776 108.781 5.776 cv
108.759 5.776 108.737 5.778 108.717 5.781 cv
108.697 5.784 108.681 5.795 108.669 5.812 cv
108.656 5.82899 108.649 5.85699 108.649 5.896 cv
108.651 5.918 108.656 5.933 108.668 5.94199 cv
108.681 5.952 108.693 5.957 108.706 5.959 cv
108.719 5.962 108.728 5.962 108.733 5.962 cv
108.854 5.961 108.975 5.958 109.098 5.953 cv
109.221 5.948 109.343 5.945 109.462 5.944 cv
109.496 5.944 109.539 5.945 109.591 5.947 cv
109.643 5.949 109.698 5.951 109.756 5.953 cv
109.813 5.95499 109.868 5.957 109.92 5.959 cv
109.972 5.961 110.015 5.962 110.048 5.962 cv
110.059 5.963 110.073 5.961 110.089 5.957 cv
110.106 5.95399 110.121 5.94299 110.135 5.92599 cv
110.148 5.909 110.155 5.881 110.156 5.842 cv
110.154 5.81 110.141 5.791 110.116 5.784 cv
110.091 5.778 110.065 5.776 110.036 5.776 cv
109.956 5.776 109.891 5.767 109.84 5.751 cv
109.79 5.73399 109.75 5.708 109.717 5.669 cv
109.684 5.63 109.653 5.576 109.624 5.507 cv
108.775 3.547 li
f
111.838 5.205 mo
112.265 5.205 li
112.291 5.206 112.315 5.204 112.335 5.202 cv
112.355 5.198 112.37 5.191 112.382 5.178 cv
112.393 5.164 112.399 5.14301 112.399 5.113 cv
112.399 5.093 112.393 5.08 112.382 5.072 cv
112.371 5.063 112.356 5.058 112.337 5.056 cv
112.318 5.055 112.297 5.054 112.273 5.054 cv
111.876 5.054 li
112.03 4.43501 li
112.032 4.425 112.035 4.414 112.038 4.404 cv
112.041 4.394 112.043 4.385 112.043 4.376 cv
112.042 4.33801 112.029 4.306 112.003 4.281 cv
111.977 4.256 111.943 4.243 111.901 4.243 cv
111.848 4.243 111.807 4.259 111.774 4.291 cv
111.742 4.323 111.719 4.367 111.704 4.423 cv
111.699 4.438 111.697 4.45 111.695 4.455 cv
111.694 4.46 111.692 4.466 111.691 4.471 cv
111.689 4.47601 111.687 4.487 111.682 4.505 cv
111.678 4.522 111.671 4.55 111.662 4.59 cv
111.652 4.63 111.637 4.688 111.619 4.762 cv
111.6 4.83701 111.576 4.934 111.545 5.054 cv
111.118 5.054 li
111.092 5.054 111.068 5.055 111.049 5.058 cv
111.028 5.06001 111.013 5.068 111.002 5.081 cv
110.99 5.095 110.984 5.116 110.984 5.146 cv
110.984 5.165 110.99 5.179 111 5.188 cv
111.011 5.196 111.026 5.201 111.044 5.203 cv
111.063 5.204 111.085 5.205 111.11 5.205 cv
111.507 5.205 li
111.261 6.192 li
111.252 6.228 111.243 6.266 111.233 6.307 cv
111.224 6.348 111.215 6.386 111.208 6.42101 cv
111.202 6.456 111.199 6.483 111.198 6.502 cv
111.199 6.585 111.22 6.655 111.261 6.715 cv
111.302 6.774 111.356 6.819 111.424 6.85101 cv
111.491 6.883 111.565 6.899 111.645 6.9 cv
111.723 6.899 111.795 6.884 111.861 6.856 cv
111.927 6.828 111.987 6.791 112.041 6.746 cv
112.095 6.7 112.142 6.652 112.184 6.6 cv
112.225 6.548 112.26 6.498 112.288 6.45 cv
112.316 6.401 112.337 6.36 112.352 6.325 cv
112.367 6.292 112.373 6.269 112.373 6.259 cv
112.373 6.241 112.368 6.229 112.359 6.221 cv
112.35 6.21301 112.34 6.209 112.33 6.207 cv
112.319 6.205 112.311 6.205 112.307 6.205 cv
112.291 6.205 112.278 6.206 112.269 6.21 cv
112.26 6.21301 112.252 6.221 112.245 6.232 cv
112.238 6.244 112.229 6.261 112.219 6.285 cv
112.189 6.35101 112.155 6.414 112.114 6.473 cv
112.074 6.533 112.029 6.586 111.981 6.632 cv
111.932 6.678 111.881 6.715 111.826 6.742 cv
111.772 6.769 111.716 6.78201 111.658 6.78201 cv
111.613 6.783 111.578 6.76801 111.552 6.736 cv
111.526 6.705 111.512 6.652 111.512 6.577 cv
111.512 6.563 111.513 6.545 111.517 6.524 cv
111.519 6.502 111.523 6.481 111.526 6.46 cv
111.53 6.439 111.534 6.42 111.537 6.406 cv
111.838 5.205 li
f
24.948 7.696 mo
24.947 7.641 24.933 7.589 24.906 7.542 cv
24.878 7.494 24.84 7.455 24.792 7.425 cv
24.746 7.395 24.692 7.38 24.631 7.379 cv
24.563 7.38 24.506 7.396 24.457 7.428 cv
24.409 7.46 24.372 7.5 24.347 7.548 cv
24.321 7.595 24.308 7.645 24.308 7.696 cv
24.309 7.751 24.323 7.801 24.351 7.849 cv
24.378 7.897 24.416 7.936 24.464 7.966 cv
24.511 7.996 24.564 8.012 24.625 8.013 cv
24.693 8.012 24.751 7.995 24.799 7.964 cv
24.847 7.932 24.884 7.892 24.909 7.845 cv
24.935 7.797 24.948 7.747 24.948 7.696 cv
f
25.893 9.435 mo
25.907 9.373 25.927 9.31599 25.952 9.265 cv
25.977 9.213 26.013 9.168 26.059 9.128 cv
26.105 9.089 26.167 9.058 26.245 9.034 cv
26.322 9.01099 26.42 8.998 26.538 8.993 cv
26.55 8.993 26.563 8.992 26.579 8.987 cv
26.595 8.98299 26.608 8.972 26.62 8.95499 cv
26.633 8.937 26.639 8.91 26.64 8.873 cv
26.64 8.87 26.639 8.864 26.637 8.853 cv
26.635 8.84299 26.628 8.833 26.617 8.823 cv
26.606 8.813 26.587 8.808 26.563 8.807 cv
26.464 8.808 26.362 8.811 26.26 8.81599 cv
26.157 8.821 26.055 8.824 25.953 8.825 cv
25.85 8.824 25.746 8.821 25.64 8.81599 cv
25.533 8.811 25.431 8.808 25.331 8.807 cv
25.318 8.806 25.304 8.808 25.287 8.811 cv
25.271 8.81499 25.257 8.825 25.244 8.842 cv
25.231 8.859 25.225 8.888 25.223 8.92699 cv
25.225 8.958 25.237 8.978 25.259 8.985 cv
25.281 8.991 25.305 8.994 25.331 8.993 cv
25.444 8.99599 25.53 9.009 25.588 9.034 cv
25.647 9.059 25.687 9.091 25.708 9.13 cv
25.729 9.169 25.739 9.211 25.738 9.256 cv
25.738 9.263 25.737 9.27499 25.735 9.292 cv
25.733 9.309 25.73 9.327 25.727 9.34399 cv
25.725 9.362 25.722 9.374 25.72 9.381 cv
25.181 11.515 li
25.129 11.717 25.051 11.898 24.948 12.059 cv
24.844 12.222 24.723 12.36 24.585 12.477 cv
24.447 12.592 24.303 12.681 24.15 12.742 cv
23.996 12.804 23.844 12.835 23.693 12.836 cv
23.556 12.836 23.433 12.807 23.324 12.749 cv
23.214 12.691 23.128 12.604 23.063 12.49 cv
22.998 12.374 22.965 12.231 22.964 12.059 cv
22.964 12.054 22.964 12.032 22.966 11.991 cv
22.968 11.95 22.974 11.897 22.984 11.828 cv
22.993 11.759 23.008 11.682 23.03 11.593 cv
23.61 9.268 li
23.622 9.214 23.636 9.169 23.649 9.134 cv
23.663 9.098 23.686 9.07 23.717 9.05 cv
23.748 9.029 23.795 9.013 23.857 9.006 cv
23.918 8.99599 24.004 8.993 24.112 8.993 cv
24.164 8.994 24.203 8.992 24.233 8.988 cv
24.263 8.985 24.284 8.974 24.297 8.957 cv
24.309 8.93999 24.315 8.91199 24.315 8.873 cv
24.314 8.851 24.308 8.836 24.297 8.826 cv
24.286 8.817 24.274 8.811 24.261 8.809 cv
24.248 8.807 24.238 8.807 24.231 8.807 cv
24.189 8.807 24.133 8.808 24.065 8.81 cv
23.997 8.812 23.924 8.814 23.849 8.81599 cv
23.773 8.818 23.7 8.82 23.633 8.822 cv
23.565 8.824 23.509 8.825 23.466 8.825 cv
23.421 8.825 23.366 8.824 23.297 8.822 cv
23.229 8.82 23.156 8.818 23.081 8.81599 cv
23.005 8.814 22.932 8.811 22.864 8.81 cv
22.796 8.808 22.74 8.807 22.695 8.807 cv
22.679 8.806 22.662 8.808 22.644 8.811 cv
22.627 8.81499 22.612 8.825 22.6 8.842 cv
22.588 8.859 22.582 8.888 22.582 8.92699 cv
22.582 8.958 22.595 8.978 22.622 8.985 cv
22.65 8.991 22.692 8.994 22.749 8.993 cv
22.754 8.993 22.768 8.993 22.791 8.993 cv
22.814 8.994 22.842 8.995 22.874 8.99599 cv
22.907 8.998 22.941 9.001 22.976 9.005 cv
23.03 9.009 23.07 9.016 23.097 9.028 cv
23.123 9.03799 23.137 9.062 23.137 9.1 cv
23.137 9.11 23.133 9.13 23.126 9.16199 cv
23.119 9.194 23.111 9.231 23.099 9.27499 cv
23.09 9.317 23.078 9.361 23.067 9.405 cv
23.056 9.45 23.045 9.489 23.036 9.52499 cv
22.904 10.051 li
22.895 10.091 22.88 10.151 22.861 10.233 cv
22.84 10.315 22.818 10.407 22.791 10.512 cv
22.765 10.616 22.738 10.723 22.711 10.834 cv
22.683 10.943 22.657 11.048 22.633 11.145 cv
22.608 11.243 22.588 11.327 22.571 11.395 cv
22.555 11.462 22.544 11.506 22.54 11.527 cv
22.52 11.609 22.508 11.677 22.503 11.729 cv
22.499 11.782 22.497 11.831 22.498 11.874 cv
22.499 12.056 22.531 12.219 22.592 12.361 cv
22.654 12.502 22.74 12.623 22.849 12.721 cv
22.957 12.819 23.081 12.894 23.221 12.945 cv
23.361 12.996 23.511 13.021 23.669 13.021 cv
23.859 13.019 24.044 12.981 24.223 12.904 cv
24.403 12.826 24.57 12.721 24.723 12.585 cv
24.877 12.45 25.009 12.294 25.119 12.119 cv
25.23 11.943 25.31 11.755 25.361 11.557 cv
25.893 9.435 li
f
27.284 11.008 mo
27.285 11.005 27.287 10.998 27.291 10.988 cv
27.293 10.978 27.295 10.968 27.297 10.958 cv
27.299 10.949 27.301 10.943 27.301 10.941 cv
27.301 10.929 27.297 10.917 27.286 10.904 cv
27.276 10.891 27.259 10.884 27.234 10.882 cv
27.217 10.882 27.19 10.884 27.156 10.886 cv
27.122 10.888 27.082 10.891 27.039 10.895 cv
26.996 10.899 26.952 10.902 26.908 10.906 cv
26.863 10.91 26.823 10.913 26.786 10.916 cv
26.749 10.92 26.72 10.922 26.698 10.924 cv
26.686 10.925 26.674 10.928 26.659 10.931 cv
26.645 10.935 26.633 10.944 26.623 10.957 cv
26.612 10.97 26.607 10.992 26.606 11.02 cv
26.607 11.039 26.612 11.053 26.623 11.062 cv
26.634 11.07 26.648 11.075 26.665 11.077 cv
26.681 11.078 26.698 11.079 26.715 11.079 cv
26.764 11.079 26.804 11.081 26.831 11.084 cv
26.859 11.087 26.879 11.092 26.891 11.098 cv
26.903 11.104 26.91 11.111 26.912 11.118 cv
26.915 11.125 26.917 11.134 26.916 11.142 cv
26.916 11.149 26.913 11.164 26.909 11.187 cv
26.905 11.208 26.898 11.234 26.891 11.263 cv
26.885 11.292 26.878 11.323 26.87 11.352 cv
26.862 11.382 26.855 11.41 26.849 11.435 cv
26.753 11.82 li
26.747 11.841 26.738 11.875 26.726 11.924 cv
26.714 11.971 26.7 12.028 26.683 12.093 cv
26.666 12.158 26.649 12.228 26.631 12.3 cv
26.612 12.373 26.594 12.445 26.577 12.516 cv
26.559 12.587 26.543 12.653 26.528 12.713 cv
26.514 12.773 26.502 12.822 26.493 12.862 cv
26.483 12.901 26.478 12.925 26.477 12.933 cv
26.467 12.982 26.46 13.023 26.458 13.054 cv
26.456 13.085 26.455 13.113 26.456 13.138 cv
26.457 13.279 26.484 13.402 26.538 13.504 cv
26.591 13.608 26.665 13.687 26.757 13.743 cv
26.849 13.799 26.953 13.827 27.071 13.828 cv
27.176 13.827 27.281 13.806 27.384 13.764 cv
27.487 13.722 27.585 13.663 27.677 13.588 cv
27.769 13.513 27.85 13.426 27.921 13.325 cv
27.992 13.226 28.048 13.117 28.088 13.001 cv
28.128 12.885 28.149 12.765 28.15 12.64 cv
28.149 12.518 28.13 12.412 28.093 12.324 cv
28.055 12.236 28.006 12.164 27.944 12.107 cv
27.883 12.051 27.816 12.009 27.742 11.981 cv
27.669 11.954 27.596 11.941 27.522 11.941 cv
27.45 11.942 27.382 11.954 27.317 11.977 cv
27.253 12 27.193 12.028 27.14 12.063 cv
27.085 12.098 27.037 12.134 26.995 12.171 cv
27.284 11.008 li
cp
27.075 13.711 mo
27.007 13.71 26.948 13.692 26.9 13.655 cv
26.853 13.619 26.815 13.569 26.79 13.504 cv
26.765 13.44 26.753 13.367 26.753 13.284 cv
26.753 13.246 26.755 13.207 26.76 13.165 cv
26.766 13.124 26.774 13.074 26.786 13.019 cv
26.798 12.963 26.814 12.894 26.834 12.812 cv
26.854 12.731 26.878 12.631 26.908 12.514 cv
26.915 12.489 26.922 12.468 26.929 12.453 cv
26.934 12.438 26.943 12.421 26.955 12.404 cv
26.967 12.387 26.986 12.364 27.012 12.334 cv
27.066 12.273 27.121 12.222 27.178 12.181 cv
27.236 12.14 27.293 12.109 27.349 12.089 cv
27.406 12.069 27.459 12.058 27.51 12.058 cv
27.565 12.057 27.616 12.072 27.662 12.1 cv
27.708 12.129 27.745 12.173 27.773 12.233 cv
27.801 12.293 27.815 12.369 27.816 12.464 cv
27.816 12.508 27.81 12.564 27.799 12.633 cv
27.788 12.703 27.774 12.777 27.754 12.858 cv
27.735 12.938 27.711 13.018 27.685 13.095 cv
27.659 13.173 27.629 13.243 27.598 13.305 cv
27.573 13.357 27.541 13.407 27.504 13.455 cv
27.467 13.503 27.425 13.546 27.379 13.585 cv
27.333 13.623 27.284 13.654 27.233 13.676 cv
27.181 13.699 27.129 13.71 27.075 13.711 cv
f
53.685 8.92 mo
53.684 8.865 53.67 8.813 53.643 8.766 cv
53.615 8.71799 53.577 8.679 53.53 8.64899 cv
53.483 8.619 53.429 8.604 53.368 8.603 cv
53.301 8.604 53.243 8.62 53.194 8.652 cv
53.146 8.684 53.109 8.724 53.084 8.772 cv
53.059 8.819 53.045 8.869 53.045 8.92 cv
53.046 8.975 53.06 9.026 53.088 9.073 cv
53.115 9.12099 53.153 9.16 53.201 9.18999 cv
53.248 9.22 53.301 9.236 53.362 9.237 cv
53.43 9.236 53.488 9.219 53.536 9.188 cv
53.584 9.156 53.621 9.116 53.646 9.069 cv
53.672 9.021 53.685 8.971 53.685 8.92 cv
f
54.368 10.325 mo
54.376 10.298 54.381 10.276 54.385 10.261 cv
54.388 10.246 54.39 10.233 54.391 10.224 cv
54.392 10.212 54.392 10.201 54.392 10.188 cv
54.39 10.134 54.373 10.093 54.339 10.066 cv
54.305 10.039 54.265 10.026 54.219 10.026 cv
54.187 10.026 54.152 10.035 54.112 10.055 cv
54.072 10.075 54.038 10.107 54.009 10.152 cv
54.005 10.163 53.998 10.188 53.987 10.224 cv
53.977 10.262 53.966 10.303 53.956 10.35 cv
53.944 10.396 53.934 10.436 53.925 10.474 cv
53.905 10.552 53.884 10.631 53.864 10.712 cv
53.843 10.791 53.824 10.872 53.806 10.953 cv
53.537 12.029 li
53.532 12.048 53.518 12.077 53.495 12.116 cv
53.472 12.155 53.441 12.199 53.403 12.246 cv
53.364 12.294 53.317 12.34 53.263 12.383 cv
53.209 12.428 53.149 12.464 53.081 12.493 cv
53.014 12.521 52.94 12.536 52.862 12.537 cv
52.786 12.536 52.724 12.521 52.675 12.492 cv
52.627 12.463 52.589 12.425 52.562 12.377 cv
52.535 12.331 52.517 12.278 52.506 12.222 cv
52.496 12.165 52.491 12.108 52.491 12.053 cv
52.491 11.916 52.516 11.753 52.568 11.56 cv
52.618 11.369 52.694 11.143 52.796 10.881 cv
52.828 10.8 52.852 10.735 52.87 10.687 cv
52.887 10.638 52.899 10.596 52.906 10.561 cv
52.912 10.525 52.915 10.488 52.915 10.451 cv
52.914 10.36 52.895 10.277 52.855 10.203 cv
52.815 10.13 52.758 10.071 52.685 10.028 cv
52.612 9.98399 52.526 9.961 52.425 9.96 cv
52.331 9.961 52.246 9.98299 52.169 10.025 cv
52.093 10.066 52.027 10.121 51.968 10.188 cv
51.91 10.253 51.859 10.325 51.817 10.401 cv
51.776 10.476 51.742 10.549 51.715 10.618 cv
51.688 10.688 51.668 10.747 51.655 10.794 cv
51.642 10.842 51.636 10.871 51.636 10.881 cv
51.637 10.901 51.642 10.915 51.652 10.923 cv
51.662 10.932 51.673 10.937 51.684 10.939 cv
51.695 10.941 51.703 10.941 51.708 10.941 cv
51.736 10.942 51.756 10.936 51.767 10.923 cv
51.778 10.909 51.791 10.879 51.803 10.833 cv
51.858 10.647 51.919 10.499 51.987 10.391 cv
52.055 10.282 52.124 10.205 52.196 10.159 cv
52.269 10.113 52.339 10.091 52.407 10.092 cv
52.424 10.091 52.444 10.093 52.467 10.099 cv
52.49 10.105 52.511 10.121 52.529 10.149 cv
52.547 10.176 52.556 10.22 52.557 10.283 cv
52.555 10.359 52.544 10.433 52.522 10.505 cv
52.5 10.578 52.478 10.644 52.455 10.702 cv
52.376 10.911 52.311 11.093 52.259 11.247 cv
52.208 11.4 52.17 11.534 52.145 11.647 cv
52.12 11.762 52.109 11.864 52.109 11.957 cv
52.109 12.089 52.131 12.201 52.173 12.293 cv
52.215 12.383 52.271 12.457 52.341 12.512 cv
52.411 12.568 52.489 12.607 52.575 12.631 cv
52.662 12.656 52.748 12.668 52.838 12.668 cv
52.954 12.667 53.063 12.643 53.164 12.596 cv
53.265 12.55 53.358 12.484 53.441 12.399 cv
53.417 12.503 53.39 12.605 53.36 12.706 cv
53.33 12.807 53.29 12.907 53.242 13.009 cv
53.194 13.111 53.132 13.214 53.053 13.32 cv
53.001 13.389 52.941 13.451 52.874 13.508 cv
52.808 13.565 52.734 13.61 52.653 13.644 cv
52.574 13.678 52.487 13.695 52.395 13.697 cv
52.374 13.697 52.343 13.694 52.304 13.691 cv
52.264 13.685 52.221 13.674 52.175 13.659 cv
52.129 13.642 52.084 13.617 52.044 13.583 cv
52.002 13.549 51.968 13.503 51.941 13.445 cv
51.989 13.446 52.033 13.443 52.075 13.436 cv
52.115 13.428 52.157 13.407 52.198 13.374 cv
52.229 13.347 52.257 13.314 52.281 13.274 cv
52.304 13.233 52.317 13.185 52.318 13.128 cv
52.316 13.068 52.302 13.022 52.274 12.992 cv
52.246 12.962 52.215 12.942 52.18 12.932 cv
52.146 12.923 52.118 12.918 52.096 12.919 cv
52.049 12.918 52 12.93 51.949 12.955 cv
51.897 12.979 51.855 13.02 51.819 13.077 cv
51.782 13.134 51.764 13.211 51.762 13.308 cv
51.763 13.409 51.79 13.497 51.843 13.576 cv
51.897 13.654 51.972 13.714 52.067 13.759 cv
52.161 13.804 52.271 13.827 52.395 13.828 cv
52.551 13.827 52.702 13.795 52.85 13.732 cv
52.998 13.67 53.136 13.583 53.263 13.471 cv
53.39 13.361 53.499 13.231 53.592 13.084 cv
53.684 12.937 53.751 12.779 53.794 12.608 cv
54.368 10.325 li
f
30.841 25.029 mo
30.84 24.974 30.826 24.922 30.799 24.874 cv
30.772 24.827 30.734 24.788 30.686 24.758 cv
30.639 24.728 30.585 24.713 30.524 24.712 cv
30.457 24.713 30.399 24.729 30.35 24.761 cv
30.302 24.793 30.265 24.833 30.24 24.88 cv
30.215 24.928 30.202 24.978 30.202 25.029 cv
30.202 25.084 30.217 25.135 30.244 25.182 cv
30.271 25.23 30.309 25.269 30.357 25.299 cv
30.404 25.329 30.458 25.345 30.518 25.346 cv
30.586 25.345 30.644 25.328 30.693 25.297 cv
30.74 25.265 30.778 25.225 30.802 25.177 cv
30.828 25.13 30.841 25.08 30.841 25.029 cv
f
30.547 26.599 mo
30.559 26.545 30.573 26.5 30.588 26.466 cv
30.604 26.43 30.629 26.402 30.662 26.381 cv
30.695 26.36 30.746 26.345 30.814 26.337 cv
30.882 26.328 30.974 26.324 31.091 26.324 cv
31.139 26.325 31.177 26.323 31.205 26.32 cv
31.232 26.316 31.252 26.306 31.264 26.29 cv
31.276 26.274 31.282 26.247 31.282 26.21 cv
31.281 26.187 31.275 26.17 31.264 26.16 cv
31.253 26.15 31.24 26.144 31.226 26.142 cv
31.213 26.139 31.202 26.138 31.192 26.139 cv
31.148 26.139 31.091 26.14 31.02 26.142 cv
30.95 26.144 30.877 26.146 30.798 26.148 cv
30.719 26.15 30.646 26.152 30.576 26.154 cv
30.506 26.156 30.448 26.157 30.404 26.157 cv
30.358 26.157 30.299 26.156 30.229 26.154 cv
30.158 26.152 30.085 26.15 30.006 26.148 cv
29.927 26.146 29.854 26.143 29.783 26.142 cv
29.713 26.14 29.654 26.139 29.608 26.139 cv
29.593 26.138 29.578 26.14 29.559 26.143 cv
29.541 26.147 29.525 26.157 29.511 26.173 cv
29.497 26.191 29.49 26.219 29.489 26.258 cv
29.489 26.289 29.503 26.309 29.53 26.316 cv
29.558 26.322 29.599 26.325 29.656 26.324 cv
29.74 26.323 29.814 26.325 29.875 26.328 cv
29.936 26.332 29.984 26.341 30.018 26.358 cv
30.051 26.374 30.069 26.401 30.069 26.438 cv
30.069 26.452 30.069 26.465 30.068 26.477 cv
30.066 26.488 30.063 26.507 30.057 26.533 cv
29.25 29.755 li
29.238 29.81 29.224 29.856 29.209 29.893 cv
29.193 29.929 29.168 29.958 29.135 29.978 cv
29.101 29.999 29.05 30.014 28.983 30.023 cv
28.915 30.032 28.822 30.036 28.706 30.036 cv
28.66 30.035 28.623 30.037 28.595 30.04 cv
28.567 30.044 28.546 30.055 28.534 30.072 cv
28.521 30.089 28.515 30.117 28.515 30.156 cv
28.516 30.177 28.521 30.192 28.534 30.202 cv
28.545 30.211 28.559 30.217 28.573 30.218 cv
28.587 30.221 28.597 30.221 28.604 30.221 cv
28.649 30.221 28.706 30.221 28.776 30.218 cv
28.844 30.217 28.918 30.215 28.996 30.212 cv
29.074 30.211 29.147 30.209 29.216 30.206 cv
29.286 30.204 29.343 30.204 29.387 30.204 cv
29.433 30.204 29.492 30.204 29.563 30.206 cv
29.633 30.209 29.709 30.211 29.788 30.212 cv
29.866 30.215 29.942 30.217 30.013 30.218 cv
30.084 30.221 30.142 30.221 30.188 30.221 cv
30.205 30.223 30.222 30.221 30.24 30.217 cv
30.259 30.213 30.275 30.204 30.288 30.188 cv
30.301 30.172 30.307 30.145 30.308 30.108 cv
30.309 30.074 30.295 30.053 30.268 30.045 cv
30.24 30.038 30.193 30.035 30.128 30.036 cv
30.093 30.036 30.065 30.036 30.041 30.036 cv
30.017 30.035 29.992 30.034 29.967 30.033 cv
29.942 30.031 29.91 30.028 29.872 30.024 cv
29.811 30.019 29.77 30.008 29.75 29.993 cv
29.73 29.978 29.72 29.954 29.722 29.923 cv
29.722 29.899 29.725 29.875 29.73 29.852 cv
29.734 29.828 29.74 29.806 29.746 29.785 cv
30.547 26.599 li
f
32.044 28.34 mo
32.045 28.337 32.047 28.33 32.05 28.32 cv
32.053 28.31 32.055 28.3 32.057 28.29 cv
32.059 28.281 32.061 28.275 32.061 28.273 cv
32.061 28.261 32.057 28.249 32.046 28.236 cv
32.036 28.223 32.019 28.216 31.994 28.214 cv
31.976 28.214 31.95 28.216 31.916 28.218 cv
31.882 28.22 31.842 28.223 31.799 28.227 cv
31.756 28.231 31.712 28.234 31.668 28.238 cv
31.623 28.242 31.583 28.245 31.546 28.249 cv
31.509 28.252 31.48 28.254 31.458 28.256 cv
31.446 28.257 31.434 28.26 31.419 28.263 cv
31.405 28.267 31.393 28.276 31.383 28.289 cv
31.372 28.302 31.367 28.324 31.366 28.353 cv
31.367 28.372 31.372 28.385 31.383 28.394 cv
31.394 28.402 31.408 28.407 31.425 28.409 cv
31.441 28.41 31.457 28.411 31.475 28.411 cv
31.524 28.411 31.564 28.413 31.591 28.416 cv
31.619 28.42 31.639 28.424 31.651 28.43 cv
31.662 28.436 31.67 28.443 31.672 28.45 cv
31.675 28.457 31.677 28.466 31.676 28.474 cv
31.676 28.482 31.673 28.496 31.669 28.519 cv
31.665 28.54 31.658 28.566 31.651 28.595 cv
31.645 28.625 31.638 28.655 31.63 28.684 cv
31.622 28.714 31.615 28.743 31.609 28.767 cv
31.512 29.152 li
31.507 29.173 31.498 29.208 31.486 29.256 cv
31.474 29.303 31.46 29.36 31.443 29.425 cv
31.426 29.49 31.409 29.56 31.391 29.632 cv
31.372 29.706 31.354 29.777 31.337 29.849 cv
31.319 29.92 31.303 29.985 31.288 30.045 cv
31.274 30.105 31.262 30.154 31.253 30.194 cv
31.243 30.233 31.238 30.257 31.236 30.265 cv
31.227 30.314 31.22 30.355 31.218 30.386 cv
31.216 30.418 31.215 30.445 31.215 30.47 cv
31.217 30.611 31.244 30.734 31.298 30.837 cv
31.351 30.94 31.425 31.019 31.517 31.075 cv
31.609 31.131 31.713 31.16 31.831 31.16 cv
31.936 31.16 32.041 31.138 32.144 31.096 cv
32.247 31.054 32.344 30.996 32.437 30.92 cv
32.529 30.845 32.61 30.758 32.681 30.658 cv
32.752 30.558 32.808 30.45 32.848 30.333 cv
32.888 30.217 32.909 30.097 32.91 29.972 cv
32.909 29.85 32.89 29.745 32.853 29.656 cv
32.815 29.568 32.766 29.496 32.704 29.439 cv
32.643 29.383 32.576 29.341 32.502 29.313 cv
32.429 29.286 32.356 29.273 32.282 29.273 cv
32.21 29.274 32.142 29.286 32.077 29.309 cv
32.013 29.332 31.954 29.36 31.9 29.395 cv
31.845 29.43 31.797 29.466 31.755 29.503 cv
32.044 28.34 li
cp
31.835 31.043 mo
31.766 31.042 31.708 31.024 31.66 30.987 cv
31.612 30.951 31.575 30.901 31.55 30.837 cv
31.525 30.772 31.512 30.699 31.512 30.616 cv
31.512 30.579 31.515 30.539 31.52 30.497 cv
31.526 30.456 31.534 30.406 31.546 30.351 cv
31.558 30.295 31.574 30.226 31.594 30.144 cv
31.614 30.063 31.638 29.964 31.668 29.846 cv
31.675 29.821 31.682 29.8 31.689 29.785 cv
31.694 29.77 31.703 29.753 31.715 29.736 cv
31.727 29.719 31.746 29.696 31.772 29.666 cv
31.826 29.605 31.881 29.554 31.938 29.513 cv
31.996 29.472 32.053 29.441 32.109 29.421 cv
32.166 29.401 32.219 29.39 32.27 29.39 cv
32.325 29.389 32.376 29.404 32.422 29.432 cv
32.468 29.461 32.505 29.505 32.533 29.565 cv
32.561 29.625 32.575 29.702 32.575 29.796 cv
32.575 29.84 32.57 29.897 32.559 29.966 cv
32.548 30.035 32.534 30.109 32.514 30.19 cv
32.495 30.27 32.471 30.35 32.445 30.428 cv
32.418 30.505 32.389 30.575 32.358 30.637 cv
32.333 30.689 32.301 30.739 32.264 30.787 cv
32.227 30.835 32.185 30.878 32.139 30.917 cv
32.093 30.955 32.044 30.986 31.992 31.008 cv
31.941 31.031 31.889 31.042 31.835 31.043 cv
cp
34.843 29.545 mo
34.807 29.554 34.776 29.568 34.749 29.588 cv
34.723 29.608 34.703 29.632 34.689 29.66 cv
34.675 29.686 34.667 29.713 34.667 29.742 cv
34.668 29.774 34.676 29.8 34.691 29.819 cv
34.707 29.839 34.725 29.853 34.745 29.863 cv
34.766 29.872 34.787 29.876 34.805 29.876 cv
34.817 29.876 34.834 29.874 34.855 29.868 cv
34.876 29.863 34.898 29.853 34.922 29.837 cv
34.945 29.821 34.965 29.796 34.981 29.764 cv
34.997 29.733 35.006 29.69 35.006 29.637 cv
35.006 29.57 34.988 29.512 34.956 29.466 cv
34.922 29.419 34.878 29.381 34.824 29.353 cv
34.77 29.325 34.709 29.305 34.645 29.292 cv
34.58 29.279 34.515 29.273 34.45 29.273 cv
34.32 29.275 34.21 29.291 34.119 29.324 cv
34.029 29.357 33.955 29.399 33.897 29.451 cv
33.839 29.503 33.794 29.556 33.763 29.613 cv
33.732 29.669 33.709 29.722 33.697 29.77 cv
33.686 29.819 33.679 29.857 33.68 29.884 cv
33.681 29.936 33.689 29.981 33.705 30.021 cv
33.721 30.061 33.74 30.095 33.762 30.123 cv
33.785 30.15 33.806 30.173 33.826 30.189 cv
33.853 30.21 33.879 30.227 33.906 30.241 cv
33.932 30.255 33.962 30.267 33.995 30.277 cv
34.029 30.288 34.07 30.298 34.119 30.307 cv
34.167 30.317 34.228 30.328 34.299 30.34 cv
34.317 30.344 34.341 30.348 34.37 30.355 cv
34.399 30.362 34.43 30.372 34.463 30.384 cv
34.495 30.397 34.526 30.414 34.555 30.433 cv
34.584 30.454 34.608 30.479 34.626 30.509 cv
34.645 30.539 34.654 30.575 34.655 30.616 cv
34.656 30.641 34.65 30.673 34.637 30.711 cv
34.624 30.75 34.601 30.791 34.569 30.834 cv
34.537 30.876 34.491 30.916 34.433 30.951 cv
34.392 30.974 34.349 30.992 34.306 31.004 cv
34.262 31.017 34.221 31.026 34.181 31.032 cv
34.142 31.037 34.108 31.04 34.078 31.042 cv
34.049 31.043 34.028 31.043 34.015 31.043 cv
33.972 31.043 33.927 31.04 33.879 31.036 cv
33.832 31.03 33.784 31.02 33.737 31.007 cv
33.691 30.994 33.647 30.976 33.608 30.953 cv
33.569 30.93 33.537 30.901 33.513 30.867 cv
33.559 30.861 33.599 30.847 33.634 30.824 cv
33.668 30.801 33.695 30.773 33.714 30.739 cv
33.733 30.705 33.743 30.669 33.743 30.629 cv
33.743 30.594 33.735 30.565 33.72 30.542 cv
33.705 30.519 33.686 30.502 33.661 30.491 cv
33.637 30.48 33.61 30.474 33.58 30.474 cv
33.539 30.474 33.499 30.484 33.463 30.506 cv
33.426 30.527 33.396 30.558 33.373 30.6 cv
33.35 30.642 33.338 30.693 33.337 30.754 cv
33.338 30.838 33.366 30.911 33.421 30.971 cv
33.477 31.032 33.555 31.078 33.656 31.111 cv
33.756 31.143 33.875 31.16 34.011 31.16 cv
34.138 31.16 34.25 31.146 34.345 31.121 cv
34.441 31.095 34.522 31.061 34.59 31.017 cv
34.656 30.975 34.712 30.928 34.755 30.876 cv
34.799 30.825 34.833 30.773 34.857 30.722 cv
34.882 30.669 34.899 30.622 34.909 30.578 cv
34.919 30.534 34.923 30.498 34.923 30.47 cv
34.922 30.393 34.907 30.328 34.877 30.274 cv
34.848 30.22 34.811 30.175 34.764 30.139 cv
34.718 30.104 34.668 30.076 34.615 30.054 cv
34.563 30.033 34.513 30.016 34.464 30.005 cv
34.417 29.994 34.377 29.986 34.345 29.98 cv
34.332 29.978 34.314 29.974 34.291 29.97 cv
34.268 29.966 34.246 29.961 34.224 29.957 cv
34.202 29.953 34.187 29.95 34.178 29.947 cv
34.101 29.931 34.043 29.904 34.005 29.866 cv
33.967 29.828 33.948 29.785 33.948 29.738 cv
33.948 29.705 33.956 29.672 33.971 29.639 cv
33.985 29.605 34.006 29.573 34.031 29.544 cv
34.056 29.514 34.084 29.49 34.115 29.47 cv
34.154 29.446 34.193 29.429 34.235 29.417 cv
34.277 29.406 34.317 29.399 34.354 29.395 cv
34.391 29.392 34.421 29.389 34.446 29.39 cv
34.469 29.389 34.497 29.391 34.532 29.395 cv
34.567 29.397 34.604 29.404 34.643 29.414 cv
34.682 29.425 34.719 29.44 34.755 29.461 cv
34.79 29.482 34.82 29.51 34.843 29.545 cv
f
32.51 45.634 mo
32.509 45.579 32.495 45.527 32.468 45.48 cv
32.44 45.432 32.402 45.393 32.354 45.363 cv
32.308 45.333 32.254 45.318 32.193 45.317 cv
32.125 45.318 32.068 45.334 32.019 45.366 cv
31.971 45.398 31.934 45.438 31.909 45.486 cv
31.883 45.533 31.87 45.583 31.87 45.634 cv
31.871 45.689 31.885 45.74 31.913 45.787 cv
31.94 45.835 31.978 45.874 32.026 45.904 cv
32.073 45.934 32.126 45.95 32.187 45.951 cv
32.255 45.95 32.313 45.933 32.361 45.902 cv
32.409 45.87 32.446 45.83 32.471 45.783 cv
32.497 45.735 32.51 45.685 32.51 45.634 cv
f
33.193 47.039 mo
33.201 47.012 33.206 46.99 33.21 46.975 cv
33.213 46.961 33.215 46.947 33.216 46.938 cv
33.217 46.926 33.217 46.915 33.217 46.902 cv
33.215 46.848 33.198 46.807 33.164 46.78 cv
33.13 46.753 33.09 46.74 33.044 46.74 cv
33.012 46.74 32.977 46.749 32.937 46.769 cv
32.897 46.789 32.863 46.821 32.834 46.866 cv
32.83 46.877 32.823 46.902 32.812 46.938 cv
32.802 46.976 32.792 47.017 32.781 47.064 cv
32.769 47.11 32.759 47.15 32.751 47.188 cv
32.73 47.266 32.709 47.345 32.689 47.426 cv
32.668 47.505 32.649 47.586 32.631 47.667 cv
32.362 48.743 li
32.357 48.762 32.343 48.791 32.32 48.83 cv
32.297 48.869 32.266 48.913 32.228 48.96 cv
32.189 49.008 32.142 49.054 32.088 49.097 cv
32.034 49.142 31.974 49.178 31.906 49.207 cv
31.839 49.235 31.765 49.25 31.687 49.251 cv
31.611 49.25 31.549 49.235 31.5 49.206 cv
31.452 49.177 31.414 49.139 31.387 49.091 cv
31.36 49.044 31.342 48.992 31.331 48.936 cv
31.321 48.879 31.316 48.822 31.316 48.767 cv
31.316 48.63 31.341 48.467 31.393 48.274 cv
31.443 48.083 31.519 47.857 31.621 47.595 cv
31.653 47.514 31.677 47.449 31.695 47.401 cv
31.712 47.352 31.724 47.31 31.731 47.275 cv
31.737 47.239 31.741 47.202 31.741 47.165 cv
31.74 47.074 31.72 46.991 31.68 46.917 cv
31.64 46.844 31.583 46.785 31.51 46.742 cv
31.437 46.698 31.351 46.675 31.25 46.674 cv
31.156 46.675 31.071 46.697 30.994 46.739 cv
30.918 46.78 30.852 46.835 30.793 46.902 cv
30.735 46.967 30.684 47.039 30.642 47.115 cv
30.601 47.19 30.567 47.263 30.54 47.332 cv
30.513 47.402 30.493 47.46 30.48 47.508 cv
30.467 47.556 30.461 47.585 30.461 47.595 cv
30.462 47.615 30.467 47.629 30.477 47.637 cv
30.487 47.646 30.498 47.651 30.509 47.653 cv
30.52 47.655 30.528 47.655 30.533 47.655 cv
30.561 47.656 30.581 47.65 30.592 47.637 cv
30.603 47.623 30.616 47.593 30.628 47.547 cv
30.683 47.361 30.744 47.213 30.812 47.105 cv
30.88 46.996 30.949 46.919 31.021 46.873 cv
31.094 46.827 31.164 46.805 31.232 46.806 cv
31.249 46.805 31.269 46.807 31.292 46.813 cv
31.315 46.819 31.336 46.835 31.354 46.863 cv
31.372 46.89 31.381 46.934 31.382 46.997 cv
31.38 47.073 31.369 47.147 31.347 47.219 cv
31.325 47.292 31.303 47.358 31.28 47.416 cv
31.201 47.625 31.136 47.807 31.084 47.961 cv
31.033 48.114 30.995 48.247 30.97 48.361 cv
30.945 48.476 30.934 48.578 30.934 48.671 cv
30.935 48.803 30.956 48.915 30.998 49.007 cv
31.04 49.097 31.096 49.171 31.166 49.226 cv
31.236 49.282 31.314 49.321 31.4 49.345 cv
31.487 49.37 31.573 49.382 31.663 49.382 cv
31.779 49.381 31.888 49.357 31.99 49.31 cv
32.09 49.264 32.183 49.198 32.266 49.113 cv
32.242 49.217 32.215 49.319 32.185 49.42 cv
32.155 49.521 32.115 49.621 32.067 49.723 cv
32.019 49.825 31.957 49.928 31.878 50.034 cv
31.826 50.103 31.766 50.165 31.699 50.222 cv
31.633 50.279 31.559 50.324 31.479 50.358 cv
31.399 50.392 31.312 50.409 31.22 50.411 cv
31.199 50.411 31.168 50.408 31.129 50.405 cv
31.089 50.399 31.046 50.388 31 50.373 cv
30.954 50.356 30.91 50.331 30.869 50.297 cv
30.827 50.263 30.793 50.217 30.766 50.159 cv
30.814 50.16 30.858 50.157 30.9 50.15 cv
30.941 50.142 30.982 50.121 31.023 50.088 cv
31.054 50.061 31.082 50.028 31.106 49.988 cv
31.129 49.947 31.142 49.899 31.143 49.842 cv
31.141 49.782 31.127 49.736 31.099 49.706 cv
31.071 49.676 31.04 49.656 31.005 49.646 cv
30.971 49.637 30.943 49.632 30.921 49.633 cv
30.874 49.632 30.825 49.644 30.774 49.669 cv
30.722 49.693 30.68 49.734 30.644 49.791 cv
30.607 49.848 30.589 49.925 30.587 50.022 cv
30.588 50.123 30.615 50.211 30.668 50.29 cv
30.722 50.368 30.797 50.428 30.892 50.473 cv
30.986 50.518 31.096 50.541 31.22 50.542 cv
31.376 50.541 31.527 50.509 31.675 50.446 cv
31.823 50.384 31.961 50.297 32.088 50.185 cv
32.215 50.075 32.324 49.945 32.417 49.798 cv
32.509 49.651 32.576 49.493 32.619 49.322 cv
33.193 47.039 li
f
34.323 47.435 mo
34.324 47.432 34.326 47.425 34.33 47.415 cv
34.332 47.405 34.334 47.395 34.336 47.386 cv
34.338 47.376 34.34 47.37 34.34 47.368 cv
34.341 47.356 34.336 47.344 34.325 47.331 cv
34.315 47.318 34.298 47.311 34.273 47.309 cv
34.256 47.309 34.229 47.311 34.195 47.313 cv
34.161 47.315 34.121 47.318 34.078 47.322 cv
34.035 47.326 33.991 47.329 33.947 47.333 cv
33.903 47.337 33.862 47.34 33.825 47.344 cv
33.788 47.347 33.759 47.349 33.737 47.351 cv
33.725 47.352 33.713 47.355 33.698 47.358 cv
33.684 47.363 33.672 47.371 33.662 47.384 cv
33.651 47.398 33.646 47.419 33.645 47.448 cv
33.646 47.467 33.651 47.48 33.662 47.489 cv
33.673 47.497 33.687 47.502 33.704 47.504 cv
33.72 47.506 33.737 47.506 33.754 47.506 cv
33.803 47.506 33.843 47.508 33.87 47.511 cv
33.898 47.515 33.918 47.519 33.93 47.525 cv
33.942 47.531 33.949 47.538 33.951 47.545 cv
33.954 47.552 33.956 47.561 33.955 47.569 cv
33.955 47.577 33.952 47.592 33.948 47.614 cv
33.944 47.635 33.937 47.661 33.93 47.69 cv
33.924 47.72 33.917 47.75 33.909 47.78 cv
33.901 47.809 33.894 47.838 33.888 47.862 cv
33.792 48.247 li
33.786 48.268 33.777 48.303 33.765 48.351 cv
33.753 48.398 33.739 48.455 33.722 48.52 cv
33.705 48.585 33.688 48.655 33.67 48.727 cv
33.651 48.801 33.633 48.872 33.616 48.944 cv
33.598 49.015 33.582 49.08 33.567 49.14 cv
33.553 49.2 33.541 49.25 33.532 49.289 cv
33.522 49.328 33.517 49.352 33.516 49.36 cv
33.506 49.409 33.5 49.45 33.498 49.481 cv
33.495 49.513 33.494 49.541 33.495 49.565 cv
33.496 49.706 33.523 49.829 33.577 49.932 cv
33.63 50.035 33.704 50.115 33.796 50.171 cv
33.888 50.226 33.992 50.255 34.11 50.255 cv
34.215 50.255 34.32 50.233 34.423 50.191 cv
34.526 50.149 34.623 50.091 34.716 50.016 cv
34.808 49.94 34.889 49.853 34.96 49.753 cv
35.031 49.653 35.087 49.545 35.127 49.428 cv
35.167 49.312 35.188 49.192 35.189 49.067 cv
35.188 48.945 35.169 48.84 35.132 48.751 cv
35.094 48.663 35.045 48.591 34.983 48.534 cv
34.922 48.478 34.855 48.436 34.781 48.409 cv
34.708 48.382 34.635 48.368 34.562 48.368 cv
34.489 48.369 34.421 48.381 34.356 48.404 cv
34.292 48.427 34.233 48.456 34.179 48.49 cv
34.124 48.525 34.076 48.561 34.034 48.598 cv
34.323 47.435 li
cp
34.114 50.138 mo
34.045 50.138 33.987 50.119 33.939 50.082 cv
33.892 50.046 33.854 49.996 33.829 49.932 cv
33.804 49.867 33.792 49.794 33.792 49.712 cv
33.792 49.674 33.794 49.634 33.799 49.592 cv
33.805 49.551 33.813 49.501 33.825 49.446 cv
33.837 49.39 33.853 49.321 33.873 49.239 cv
33.893 49.158 33.917 49.059 33.947 48.941 cv
33.954 48.916 33.961 48.895 33.968 48.88 cv
33.973 48.865 33.982 48.848 33.994 48.831 cv
34.006 48.815 34.025 48.791 34.051 48.762 cv
34.105 48.7 34.16 48.649 34.217 48.608 cv
34.275 48.567 34.332 48.536 34.388 48.516 cv
34.445 48.496 34.498 48.485 34.549 48.485 cv
34.604 48.485 34.655 48.499 34.701 48.527 cv
34.747 48.556 34.784 48.6 34.812 48.66 cv
34.84 48.72 34.854 48.797 34.855 48.891 cv
34.855 48.935 34.849 48.992 34.838 49.061 cv
34.827 49.13 34.813 49.204 34.793 49.285 cv
34.774 49.365 34.75 49.445 34.724 49.522 cv
34.697 49.6 34.668 49.67 34.637 49.732 cv
34.612 49.784 34.58 49.834 34.543 49.882 cv
34.506 49.93 34.464 49.973 34.418 50.012 cv
34.372 50.05 34.323 50.081 34.271 50.103 cv
34.22 50.126 34.168 50.138 34.114 50.138 cv
cp
37.122 48.64 mo
37.086 48.649 37.055 48.663 37.028 48.683 cv
37.002 48.704 36.982 48.727 36.968 48.755 cv
36.954 48.781 36.946 48.808 36.946 48.837 cv
36.947 48.869 36.955 48.895 36.97 48.914 cv
36.986 48.934 37.004 48.948 37.025 48.958 cv
37.045 48.967 37.066 48.971 37.085 48.971 cv
37.096 48.971 37.113 48.969 37.134 48.963 cv
37.155 48.958 37.177 48.948 37.201 48.932 cv
37.224 48.916 37.244 48.891 37.26 48.859 cv
37.276 48.828 37.285 48.785 37.286 48.732 cv
37.285 48.665 37.267 48.607 37.235 48.561 cv
37.201 48.514 37.157 48.476 37.103 48.448 cv
37.049 48.42 36.988 48.4 36.924 48.387 cv
36.859 48.374 36.794 48.368 36.729 48.368 cv
36.599 48.37 36.489 48.386 36.399 48.419 cv
36.308 48.452 36.234 48.494 36.176 48.546 cv
36.118 48.598 36.074 48.651 36.042 48.708 cv
36.011 48.764 35.988 48.817 35.976 48.865 cv
35.965 48.914 35.958 48.952 35.959 48.979 cv
35.96 49.031 35.968 49.076 35.984 49.116 cv
36 49.156 36.019 49.19 36.041 49.218 cv
36.064 49.245 36.085 49.268 36.105 49.285 cv
36.132 49.306 36.158 49.322 36.185 49.336 cv
36.211 49.35 36.241 49.362 36.274 49.373 cv
36.308 49.383 36.349 49.393 36.398 49.402 cv
36.446 49.412 36.507 49.423 36.578 49.435 cv
36.597 49.439 36.62 49.444 36.649 49.45 cv
36.678 49.457 36.709 49.467 36.742 49.479 cv
36.774 49.492 36.805 49.509 36.834 49.529 cv
36.863 49.549 36.887 49.574 36.905 49.604 cv
36.924 49.634 36.933 49.67 36.934 49.712 cv
36.935 49.736 36.929 49.768 36.916 49.806 cv
36.903 49.845 36.88 49.886 36.848 49.929 cv
36.816 49.971 36.77 50.011 36.712 50.046 cv
36.671 50.069 36.628 50.087 36.585 50.099 cv
36.541 50.112 36.5 50.121 36.46 50.127 cv
36.421 50.132 36.387 50.136 36.357 50.137 cv
36.328 50.138 36.307 50.138 36.294 50.138 cv
36.251 50.138 36.206 50.136 36.158 50.131 cv
36.111 50.125 36.063 50.115 36.016 50.102 cv
35.97 50.089 35.926 50.071 35.887 50.048 cv
35.848 50.025 35.816 49.997 35.792 49.962 cv
35.838 49.956 35.878 49.942 35.913 49.919 cv
35.947 49.896 35.974 49.868 35.993 49.834 cv
36.012 49.8 36.022 49.764 36.022 49.724 cv
36.022 49.689 36.014 49.661 35.999 49.638 cv
35.984 49.615 35.965 49.597 35.94 49.586 cv
35.916 49.575 35.889 49.569 35.859 49.569 cv
35.818 49.569 35.778 49.58 35.742 49.601 cv
35.705 49.622 35.675 49.653 35.652 49.695 cv
35.629 49.737 35.617 49.788 35.616 49.85 cv
35.617 49.933 35.645 50.006 35.7 50.066 cv
35.756 50.127 35.834 50.173 35.935 50.206 cv
36.035 50.239 36.154 50.255 36.29 50.255 cv
36.417 50.255 36.529 50.241 36.624 50.216 cv
36.72 50.19 36.801 50.156 36.869 50.112 cv
36.935 50.07 36.991 50.023 37.034 49.971 cv
37.078 49.92 37.112 49.868 37.136 49.817 cv
37.161 49.764 37.178 49.717 37.188 49.673 cv
37.198 49.629 37.202 49.593 37.202 49.565 cv
37.201 49.488 37.186 49.423 37.157 49.369 cv
37.127 49.315 37.09 49.27 37.043 49.234 cv
36.997 49.2 36.947 49.171 36.894 49.149 cv
36.842 49.128 36.792 49.111 36.744 49.101 cv
36.696 49.089 36.656 49.081 36.624 49.075 cv
36.611 49.073 36.593 49.069 36.57 49.065 cv
36.547 49.061 36.525 49.057 36.503 49.052 cv
36.481 49.048 36.466 49.045 36.457 49.042 cv
36.38 49.026 36.322 48.999 36.284 48.961 cv
36.246 48.923 36.227 48.88 36.227 48.832 cv
36.227 48.8 36.235 48.767 36.25 48.734 cv
36.264 48.7 36.285 48.668 36.31 48.639 cv
36.335 48.609 36.363 48.585 36.394 48.565 cv
36.433 48.541 36.473 48.524 36.514 48.512 cv
36.556 48.501 36.596 48.494 36.633 48.49 cv
36.67 48.487 36.7 48.485 36.725 48.485 cv
36.748 48.485 36.776 48.486 36.811 48.49 cv
36.846 48.492 36.883 48.499 36.922 48.509 cv
36.961 48.52 36.998 48.535 37.034 48.556 cv
37.069 48.577 37.099 48.605 37.122 48.64 cv
f
126.969 25.064 mo
126.968 25.009 126.954 24.957 126.927 24.91 cv
126.899 24.862 126.861 24.823 126.813 24.793 cv
126.767 24.763 126.713 24.748 126.652 24.747 cv
126.584 24.748 126.527 24.764 126.478 24.796 cv
126.43 24.828 126.393 24.868 126.368 24.916 cv
126.342 24.963 126.329 25.013 126.329 25.064 cv
126.33 25.119 126.344 25.17 126.372 25.218 cv
126.399 25.265 126.437 25.304 126.485 25.334 cv
126.532 25.364 126.586 25.38 126.646 25.381 cv
126.714 25.38 126.772 25.363 126.821 25.332 cv
126.868 25.3 126.905 25.26 126.93 25.212 cv
126.956 25.165 126.969 25.115 126.969 25.064 cv
f
126.674 26.635 mo
126.686 26.581 126.7 26.537 126.715 26.501 cv
126.731 26.466 126.756 26.438 126.789 26.417 cv
126.822 26.396 126.873 26.381 126.941 26.373 cv
127.009 26.364 127.101 26.36 127.218 26.36 cv
127.266 26.361 127.304 26.359 127.332 26.356 cv
127.359 26.352 127.379 26.342 127.391 26.326 cv
127.403 26.31 127.409 26.283 127.409 26.246 cv
127.408 26.223 127.402 26.206 127.391 26.196 cv
127.38 26.186 127.367 26.18 127.353 26.178 cv
127.34 26.175 127.329 26.174 127.319 26.175 cv
127.275 26.175 127.218 26.176 127.147 26.178 cv
127.077 26.18 127.004 26.182 126.925 26.184 cv
126.846 26.186 126.773 26.188 126.703 26.19 cv
126.633 26.192 126.575 26.193 126.531 26.193 cv
126.485 26.193 126.426 26.192 126.356 26.19 cv
126.285 26.188 126.212 26.186 126.133 26.184 cv
126.054 26.182 125.981 26.179 125.91 26.178 cv
125.84 26.176 125.781 26.175 125.735 26.175 cv
125.72 26.174 125.705 26.176 125.686 26.179 cv
125.668 26.183 125.652 26.193 125.638 26.209 cv
125.624 26.226 125.617 26.255 125.616 26.294 cv
125.616 26.325 125.63 26.345 125.657 26.352 cv
125.685 26.358 125.726 26.361 125.783 26.36 cv
125.867 26.359 125.941 26.361 126.002 26.364 cv
126.063 26.368 126.111 26.377 126.145 26.394 cv
126.178 26.41 126.196 26.437 126.196 26.474 cv
126.196 26.488 126.196 26.501 126.195 26.513 cv
126.193 26.524 126.19 26.543 126.184 26.569 cv
125.377 29.791 li
125.365 29.846 125.351 29.892 125.336 29.929 cv
125.32 29.965 125.295 29.993 125.262 30.014 cv
125.228 30.035 125.178 30.05 125.11 30.059 cv
125.042 30.068 124.949 30.072 124.833 30.072 cv
124.787 30.071 124.75 30.073 124.722 30.076 cv
124.694 30.08 124.673 30.091 124.661 30.108 cv
124.648 30.125 124.642 30.153 124.642 30.192 cv
124.643 30.213 124.648 30.228 124.661 30.238 cv
124.672 30.247 124.686 30.253 124.701 30.254 cv
124.714 30.257 124.724 30.257 124.731 30.257 cv
124.776 30.257 124.833 30.257 124.903 30.254 cv
124.971 30.253 125.045 30.251 125.123 30.248 cv
125.201 30.247 125.274 30.245 125.343 30.242 cv
125.413 30.24 125.47 30.24 125.514 30.24 cv
125.56 30.24 125.619 30.24 125.69 30.242 cv
125.76 30.245 125.836 30.247 125.915 30.248 cv
125.993 30.251 126.069 30.253 126.14 30.254 cv
126.211 30.257 126.27 30.257 126.315 30.257 cv
126.332 30.258 126.349 30.257 126.367 30.253 cv
126.386 30.249 126.402 30.24 126.415 30.224 cv
126.428 30.208 126.434 30.181 126.435 30.144 cv
126.436 30.11 126.422 30.089 126.395 30.081 cv
126.367 30.074 126.32 30.071 126.255 30.072 cv
126.22 30.072 126.192 30.072 126.168 30.072 cv
126.144 30.071 126.119 30.07 126.094 30.069 cv
126.069 30.067 126.037 30.064 125.999 30.06 cv
125.938 30.055 125.897 30.044 125.877 30.029 cv
125.857 30.014 125.847 29.99 125.849 29.959 cv
125.849 29.935 125.852 29.911 125.857 29.888 cv
125.861 29.864 125.867 29.842 125.873 29.821 cv
126.674 26.635 li
f
128.003 30.2 mo
128.033 30.2 128.074 30.199 128.126 30.197 cv
128.178 30.196 128.235 30.192 128.3 30.186 cv
128.363 30.18 128.427 30.171 128.493 30.16 cv
128.558 30.148 128.62 30.132 128.677 30.112 cv
128.754 30.084 128.816 30.052 128.865 30.016 cv
128.913 29.98 128.951 29.941 128.977 29.901 cv
129.003 29.86 129.021 29.821 129.031 29.782 cv
129.041 29.744 129.046 29.709 129.045 29.677 cv
129.044 29.599 129.021 29.534 128.975 29.479 cv
128.928 29.424 128.867 29.382 128.789 29.353 cv
128.711 29.324 128.624 29.309 128.526 29.309 cv
128.424 29.309 128.32 29.324 128.211 29.355 cv
128.102 29.385 127.996 29.43 127.894 29.49 cv
127.792 29.55 127.699 29.624 127.617 29.712 cv
127.534 29.801 127.469 29.904 127.421 30.02 cv
127.372 30.137 127.348 30.266 127.346 30.409 cv
127.346 30.516 127.363 30.616 127.395 30.71 cv
127.428 30.805 127.476 30.888 127.539 30.961 cv
127.603 31.033 127.682 31.09 127.775 31.132 cv
127.868 31.173 127.977 31.195 128.099 31.196 cv
128.241 31.194 128.367 31.181 128.479 31.152 cv
128.59 31.124 128.687 31.089 128.77 31.046 cv
128.853 31.003 128.921 30.959 128.975 30.915 cv
129.03 30.869 129.07 30.83 129.097 30.795 cv
129.124 30.76 129.137 30.735 129.137 30.723 cv
129.137 30.714 129.133 30.704 129.126 30.694 cv
129.119 30.683 129.11 30.673 129.099 30.664 cv
129.088 30.657 129.077 30.652 129.066 30.652 cv
129.054 30.651 129.044 30.654 129.036 30.66 cv
129.027 30.666 129.015 30.677 128.999 30.694 cv
128.933 30.77 128.863 30.832 128.788 30.881 cv
128.714 30.93 128.64 30.969 128.566 30.995 cv
128.492 31.023 128.424 31.042 128.36 31.054 cv
128.297 31.066 128.242 31.073 128.198 31.076 cv
128.154 31.078 128.124 31.079 128.108 31.078 cv
128.023 31.078 127.95 31.06 127.887 31.023 cv
127.825 30.985 127.776 30.929 127.742 30.854 cv
127.707 30.779 127.69 30.685 127.689 30.572 cv
127.689 30.553 127.689 30.53 127.691 30.501 cv
127.693 30.472 127.697 30.434 127.704 30.385 cv
127.712 30.338 127.723 30.276 127.739 30.2 cv
128.003 30.2 li
cp
127.773 30.083 mo
127.808 29.962 127.852 29.862 127.906 29.782 cv
127.959 29.701 128.017 29.637 128.078 29.589 cv
128.14 29.542 128.2 29.506 128.26 29.482 cv
128.319 29.458 128.373 29.443 128.419 29.435 cv
128.466 29.429 128.502 29.425 128.526 29.426 cv
128.588 29.426 128.645 29.435 128.695 29.456 cv
128.747 29.475 128.788 29.504 128.818 29.541 cv
128.849 29.578 128.864 29.624 128.865 29.677 cv
128.864 29.744 128.846 29.801 128.812 29.848 cv
128.777 29.894 128.732 29.933 128.675 29.963 cv
128.618 29.992 128.556 30.015 128.489 30.032 cv
128.421 30.049 128.355 30.061 128.288 30.067 cv
128.221 30.075 128.161 30.079 128.106 30.081 cv
128.052 30.083 128.009 30.083 127.978 30.083 cv
127.773 30.083 li
cp
131.137 29.581 mo
131.101 29.59 131.07 29.604 131.043 29.624 cv
131.017 29.644 130.997 29.668 130.983 29.695 cv
130.969 29.722 130.961 29.749 130.961 29.777 cv
130.962 29.809 130.97 29.835 130.985 29.855 cv
131 29.874 131.018 29.889 131.039 29.898 cv
131.06 29.907 131.081 29.911 131.099 29.911 cv
131.111 29.911 131.127 29.909 131.148 29.904 cv
131.17 29.899 131.192 29.888 131.216 29.872 cv
131.239 29.856 131.259 29.832 131.274 29.8 cv
131.291 29.768 131.3 29.726 131.3 29.673 cv
131.3 29.605 131.282 29.548 131.25 29.501 cv
131.216 29.454 131.172 29.417 131.118 29.389 cv
131.063 29.36 131.003 29.34 130.938 29.328 cv
130.874 29.315 130.808 29.309 130.744 29.309 cv
130.614 29.31 130.504 29.327 130.413 29.36 cv
130.323 29.392 130.249 29.435 130.191 29.487 cv
130.133 29.538 130.088 29.592 130.057 29.648 cv
130.026 29.705 130.003 29.758 129.991 29.806 cv
129.979 29.855 129.973 29.892 129.974 29.919 cv
129.974 29.971 129.983 30.016 129.999 30.056 cv
130.015 30.096 130.034 30.13 130.056 30.158 cv
130.079 30.186 130.1 30.208 130.12 30.225 cv
130.147 30.246 130.173 30.263 130.2 30.277 cv
130.226 30.29 130.256 30.302 130.289 30.313 cv
130.323 30.323 130.364 30.333 130.412 30.343 cv
130.461 30.353 130.521 30.363 130.593 30.376 cv
130.611 30.379 130.635 30.384 130.664 30.391 cv
130.693 30.397 130.723 30.407 130.756 30.419 cv
130.789 30.432 130.82 30.449 130.849 30.469 cv
130.878 30.489 130.902 30.514 130.92 30.544 cv
130.939 30.574 130.948 30.61 130.949 30.652 cv
130.949 30.676 130.943 30.708 130.931 30.747 cv
130.917 30.786 130.895 30.826 130.863 30.869 cv
130.83 30.912 130.785 30.951 130.727 30.987 cv
130.686 31.01 130.643 31.027 130.6 31.04 cv
130.556 31.053 130.515 31.062 130.475 31.067 cv
130.436 31.072 130.401 31.076 130.372 31.077 cv
130.343 31.078 130.322 31.078 130.308 31.078 cv
130.266 31.078 130.221 31.076 130.173 31.071 cv
130.125 31.065 130.078 31.056 130.031 31.042 cv
129.984 31.029 129.941 31.012 129.902 30.989 cv
129.863 30.966 129.831 30.937 129.806 30.903 cv
129.853 30.897 129.893 30.883 129.928 30.86 cv
129.962 30.837 129.988 30.809 130.008 30.774 cv
130.027 30.741 130.037 30.704 130.037 30.664 cv
130.037 30.629 130.029 30.601 130.014 30.578 cv
129.999 30.555 129.979 30.537 129.955 30.526 cv
129.931 30.515 129.903 30.51 129.874 30.51 cv
129.832 30.51 129.793 30.52 129.757 30.542 cv
129.72 30.563 129.69 30.594 129.667 30.635 cv
129.643 30.677 129.631 30.729 129.631 30.79 cv
129.631 30.874 129.66 30.946 129.715 31.007 cv
129.771 31.067 129.849 31.113 129.95 31.146 cv
130.05 31.179 130.168 31.195 130.304 31.196 cv
130.432 31.195 130.544 31.182 130.639 31.156 cv
130.735 31.13 130.816 31.096 130.883 31.053 cv
130.95 31.01 131.006 30.963 131.049 30.912 cv
131.093 30.86 131.126 30.809 131.151 30.757 cv
131.176 30.705 131.193 30.658 131.202 30.613 cv
131.212 30.569 131.217 30.533 131.217 30.505 cv
131.216 30.429 131.2 30.363 131.171 30.309 cv
131.142 30.256 131.104 30.21 131.058 30.175 cv
131.011 30.14 130.962 30.111 130.909 30.09 cv
130.857 30.069 130.806 30.052 130.759 30.041 cv
130.711 30.03 130.671 30.021 130.639 30.016 cv
130.626 30.013 130.608 30.01 130.585 30.005 cv
130.562 30.001 130.539 29.997 130.518 29.993 cv
130.496 29.989 130.481 29.985 130.472 29.982 cv
130.394 29.966 130.336 29.94 130.299 29.902 cv
130.26 29.863 130.242 29.82 130.242 29.773 cv
130.242 29.74 130.249 29.708 130.265 29.674 cv
130.279 29.64 130.3 29.608 130.325 29.579 cv
130.35 29.55 130.378 29.526 130.409 29.505 cv
130.447 29.481 130.487 29.464 130.529 29.453 cv
130.571 29.442 130.611 29.434 130.647 29.431 cv
130.684 29.427 130.715 29.425 130.74 29.426 cv
130.763 29.425 130.791 29.426 130.826 29.43 cv
130.861 29.433 130.898 29.44 130.937 29.45 cv
130.976 29.46 131.013 29.475 131.049 29.496 cv
131.084 29.517 131.113 29.545 131.137 29.581 cv
f
143.789 45.634 mo
143.788 45.579 143.774 45.527 143.747 45.48 cv
143.719 45.432 143.681 45.393 143.634 45.363 cv
143.587 45.333 143.533 45.318 143.472 45.317 cv
143.405 45.318 143.347 45.334 143.298 45.366 cv
143.25 45.398 143.213 45.438 143.188 45.486 cv
143.163 45.533 143.15 45.583 143.15 45.634 cv
143.15 45.689 143.164 45.74 143.192 45.787 cv
143.219 45.835 143.257 45.874 143.305 45.904 cv
143.352 45.934 143.405 45.95 143.466 45.951 cv
143.534 45.95 143.592 45.933 143.64 45.902 cv
143.688 45.87 143.725 45.83 143.75 45.783 cv
143.776 45.735 143.789 45.685 143.789 45.634 cv
f
144.472 47.039 mo
144.48 47.012 144.485 46.99 144.489 46.975 cv
144.492 46.961 144.494 46.947 144.495 46.938 cv
144.496 46.926 144.496 46.915 144.496 46.902 cv
144.494 46.848 144.477 46.807 144.443 46.78 cv
144.409 46.753 144.369 46.74 144.322 46.74 cv
144.291 46.74 144.256 46.749 144.216 46.769 cv
144.176 46.789 144.142 46.821 144.113 46.866 cv
144.109 46.877 144.101 46.902 144.091 46.938 cv
144.081 46.976 144.07 47.017 144.06 47.064 cv
144.047 47.11 144.037 47.15 144.03 47.188 cv
144.009 47.266 143.988 47.345 143.968 47.426 cv
143.947 47.505 143.928 47.586 143.91 47.667 cv
143.641 48.743 li
143.636 48.762 143.622 48.791 143.599 48.83 cv
143.576 48.869 143.545 48.913 143.507 48.96 cv
143.467 49.008 143.421 49.054 143.367 49.097 cv
143.313 49.142 143.253 49.178 143.185 49.207 cv
143.118 49.235 143.044 49.25 142.965 49.251 cv
142.89 49.25 142.828 49.235 142.779 49.206 cv
142.73 49.177 142.692 49.139 142.666 49.091 cv
142.639 49.044 142.621 48.992 142.61 48.936 cv
142.6 48.879 142.595 48.822 142.595 48.767 cv
142.595 48.63 142.62 48.467 142.672 48.274 cv
142.722 48.083 142.798 47.857 142.9 47.595 cv
142.932 47.514 142.955 47.449 142.974 47.401 cv
142.99 47.352 143.003 47.31 143.009 47.275 cv
143.016 47.239 143.019 47.202 143.019 47.165 cv
143.018 47.074 142.998 46.991 142.959 46.917 cv
142.919 46.844 142.862 46.785 142.789 46.742 cv
142.715 46.698 142.63 46.675 142.529 46.674 cv
142.434 46.675 142.35 46.697 142.273 46.739 cv
142.197 46.78 142.131 46.835 142.072 46.902 cv
142.014 46.967 141.963 47.039 141.921 47.115 cv
141.879 47.19 141.846 47.263 141.819 47.332 cv
141.792 47.402 141.772 47.46 141.759 47.508 cv
141.746 47.556 141.74 47.585 141.74 47.595 cv
141.741 47.615 141.746 47.629 141.756 47.637 cv
141.766 47.646 141.777 47.651 141.788 47.653 cv
141.799 47.655 141.807 47.655 141.812 47.655 cv
141.84 47.656 141.86 47.65 141.871 47.637 cv
141.881 47.623 141.894 47.593 141.907 47.547 cv
141.962 47.361 142.023 47.213 142.091 47.105 cv
142.158 46.996 142.228 46.919 142.3 46.873 cv
142.373 46.827 142.442 46.805 142.511 46.806 cv
142.528 46.805 142.548 46.807 142.571 46.813 cv
142.594 46.819 142.615 46.835 142.633 46.863 cv
142.651 46.89 142.66 46.934 142.661 46.997 cv
142.659 47.073 142.648 47.147 142.626 47.219 cv
142.604 47.292 142.582 47.358 142.559 47.416 cv
142.479 47.625 142.415 47.807 142.363 47.961 cv
142.312 48.114 142.274 48.247 142.249 48.361 cv
142.224 48.476 142.212 48.578 142.212 48.671 cv
142.213 48.803 142.235 48.915 142.277 49.007 cv
142.319 49.097 142.375 49.171 142.445 49.226 cv
142.515 49.282 142.593 49.321 142.679 49.345 cv
142.765 49.37 142.852 49.382 142.942 49.382 cv
143.058 49.381 143.167 49.357 143.268 49.31 cv
143.369 49.264 143.461 49.198 143.545 49.113 cv
143.52 49.217 143.493 49.319 143.464 49.42 cv
143.434 49.521 143.394 49.621 143.346 49.723 cv
143.298 49.825 143.236 49.928 143.157 50.034 cv
143.105 50.103 143.045 50.165 142.978 50.222 cv
142.912 50.279 142.838 50.324 142.757 50.358 cv
142.677 50.392 142.591 50.409 142.499 50.411 cv
142.477 50.411 142.446 50.408 142.408 50.405 cv
142.368 50.399 142.325 50.388 142.279 50.373 cv
142.233 50.356 142.188 50.331 142.148 50.297 cv
142.106 50.263 142.072 50.217 142.045 50.159 cv
142.093 50.16 142.137 50.157 142.178 50.15 cv
142.219 50.142 142.261 50.121 142.302 50.088 cv
142.333 50.061 142.361 50.028 142.385 49.988 cv
142.408 49.947 142.421 49.899 142.421 49.842 cv
142.419 49.782 142.406 49.736 142.378 49.706 cv
142.35 49.676 142.319 49.656 142.284 49.646 cv
142.25 49.637 142.222 49.632 142.2 49.633 cv
142.152 49.632 142.104 49.644 142.053 49.669 cv
142.001 49.693 141.958 49.734 141.922 49.791 cv
141.885 49.848 141.868 49.925 141.866 50.022 cv
141.867 50.123 141.893 50.211 141.947 50.29 cv
142.001 50.368 142.076 50.428 142.171 50.473 cv
142.265 50.518 142.375 50.541 142.499 50.542 cv
142.655 50.541 142.806 50.509 142.953 50.446 cv
143.102 50.384 143.239 50.297 143.367 50.185 cv
143.493 50.075 143.603 49.945 143.696 49.798 cv
143.787 49.651 143.855 49.493 143.898 49.322 cv
144.472 47.039 li
f
145.435 49.259 mo
145.465 49.259 145.506 49.258 145.558 49.256 cv
145.61 49.255 145.667 49.251 145.732 49.245 cv
145.795 49.239 145.859 49.23 145.925 49.218 cv
145.99 49.207 146.052 49.191 146.109 49.171 cv
146.186 49.143 146.248 49.111 146.297 49.075 cv
146.345 49.039 146.383 49 146.409 48.96 cv
146.435 48.919 146.453 48.88 146.463 48.841 cv
146.473 48.803 146.478 48.768 146.477 48.736 cv
146.476 48.659 146.453 48.593 146.407 48.538 cv
146.361 48.484 146.299 48.441 146.221 48.412 cv
146.143 48.383 146.056 48.368 145.958 48.368 cv
145.856 48.368 145.752 48.383 145.643 48.414 cv
145.534 48.444 145.428 48.489 145.326 48.549 cv
145.224 48.609 145.131 48.683 145.049 48.771 cv
144.966 48.86 144.902 48.963 144.853 49.079 cv
144.804 49.196 144.78 49.325 144.778 49.468 cv
144.778 49.575 144.795 49.675 144.827 49.77 cv
144.86 49.864 144.908 49.947 144.971 50.02 cv
145.035 50.092 145.114 50.15 145.207 50.191 cv
145.3 50.232 145.409 50.254 145.531 50.255 cv
145.673 50.253 145.799 50.24 145.911 50.211 cv
146.022 50.183 146.119 50.148 146.202 50.105 cv
146.285 50.062 146.353 50.018 146.407 49.974 cv
146.462 49.929 146.502 49.889 146.529 49.854 cv
146.556 49.819 146.569 49.795 146.569 49.782 cv
146.569 49.773 146.565 49.763 146.558 49.753 cv
146.551 49.741 146.542 49.732 146.531 49.724 cv
146.52 49.716 146.509 49.712 146.498 49.711 cv
146.486 49.71 146.476 49.713 146.468 49.719 cv
146.459 49.725 146.447 49.736 146.431 49.753 cv
146.365 49.829 146.295 49.892 146.22 49.94 cv
146.146 49.989 146.072 50.028 145.998 50.055 cv
145.924 50.082 145.856 50.101 145.792 50.113 cv
145.729 50.125 145.674 50.132 145.63 50.135 cv
145.586 50.137 145.556 50.138 145.54 50.138 cv
145.455 50.138 145.382 50.119 145.319 50.082 cv
145.257 50.044 145.209 49.988 145.174 49.913 cv
145.139 49.838 145.122 49.745 145.121 49.631 cv
145.121 49.613 145.121 49.589 145.123 49.56 cv
145.125 49.531 145.129 49.493 145.136 49.444 cv
145.144 49.397 145.155 49.335 145.171 49.259 cv
145.435 49.259 li
cp
145.205 49.142 mo
145.24 49.021 145.284 48.921 145.338 48.841 cv
145.391 48.76 145.449 48.696 145.51 48.648 cv
145.572 48.601 145.632 48.565 145.692 48.542 cv
145.751 48.518 145.805 48.502 145.851 48.495 cv
145.898 48.488 145.934 48.484 145.958 48.485 cv
146.02 48.485 146.077 48.495 146.128 48.515 cv
146.179 48.534 146.22 48.563 146.25 48.6 cv
146.281 48.638 146.296 48.683 146.297 48.736 cv
146.296 48.803 146.278 48.86 146.244 48.907 cv
146.209 48.954 146.164 48.992 146.107 49.022 cv
146.05 49.051 145.988 49.074 145.921 49.091 cv
145.853 49.108 145.787 49.12 145.72 49.127 cv
145.653 49.134 145.593 49.138 145.538 49.14 cv
145.484 49.142 145.441 49.142 145.41 49.142 cv
145.205 49.142 li
cp
148.569 48.64 mo
148.533 48.649 148.502 48.663 148.475 48.683 cv
148.449 48.703 148.429 48.727 148.415 48.754 cv
148.401 48.781 148.394 48.808 148.394 48.836 cv
148.394 48.868 148.402 48.894 148.417 48.914 cv
148.432 48.933 148.451 48.948 148.471 48.957 cv
148.492 48.966 148.513 48.97 148.532 48.97 cv
148.543 48.97 148.559 48.968 148.58 48.963 cv
148.602 48.958 148.624 48.947 148.648 48.931 cv
148.671 48.915 148.691 48.891 148.706 48.859 cv
148.723 48.827 148.732 48.785 148.732 48.732 cv
148.732 48.664 148.714 48.607 148.682 48.56 cv
148.648 48.514 148.604 48.476 148.55 48.448 cv
148.495 48.419 148.435 48.399 148.37 48.386 cv
148.306 48.374 148.241 48.368 148.176 48.368 cv
148.046 48.369 147.936 48.386 147.845 48.419 cv
147.755 48.451 147.681 48.494 147.623 48.546 cv
147.565 48.597 147.52 48.651 147.489 48.707 cv
147.458 48.764 147.435 48.817 147.423 48.865 cv
147.412 48.914 147.405 48.951 147.406 48.979 cv
147.406 49.03 147.415 49.076 147.431 49.115 cv
147.447 49.155 147.466 49.189 147.488 49.217 cv
147.511 49.245 147.532 49.268 147.552 49.284 cv
147.579 49.305 147.605 49.322 147.632 49.336 cv
147.658 49.35 147.688 49.361 147.721 49.372 cv
147.755 49.383 147.796 49.392 147.844 49.402 cv
147.893 49.412 147.953 49.422 148.025 49.435 cv
148.043 49.438 148.067 49.443 148.096 49.45 cv
148.125 49.456 148.156 49.466 148.188 49.479 cv
148.221 49.491 148.252 49.508 148.281 49.528 cv
148.31 49.548 148.334 49.573 148.352 49.603 cv
148.371 49.634 148.38 49.669 148.381 49.711 cv
148.381 49.735 148.375 49.768 148.363 49.806 cv
148.35 49.845 148.327 49.885 148.295 49.929 cv
148.262 49.971 148.217 50.01 148.159 50.046 cv
148.118 50.069 148.075 50.086 148.032 50.099 cv
147.988 50.112 147.947 50.121 147.907 50.127 cv
147.868 50.131 147.833 50.135 147.804 50.136 cv
147.775 50.138 147.754 50.138 147.741 50.138 cv
147.698 50.138 147.653 50.135 147.605 50.13 cv
147.557 50.124 147.51 50.115 147.463 50.101 cv
147.416 50.088 147.373 50.071 147.334 50.048 cv
147.295 50.025 147.263 49.996 147.238 49.962 cv
147.285 49.956 147.325 49.942 147.36 49.919 cv
147.394 49.896 147.42 49.868 147.44 49.834 cv
147.459 49.8 147.469 49.763 147.469 49.724 cv
147.469 49.689 147.461 49.66 147.446 49.637 cv
147.431 49.614 147.412 49.596 147.387 49.585 cv
147.363 49.574 147.335 49.569 147.306 49.569 cv
147.264 49.569 147.225 49.579 147.189 49.601 cv
147.152 49.622 147.122 49.653 147.099 49.694 cv
147.075 49.736 147.064 49.788 147.063 49.849 cv
147.064 49.933 147.092 50.005 147.147 50.066 cv
147.203 50.127 147.281 50.173 147.382 50.206 cv
147.482 50.238 147.6 50.254 147.736 50.255 cv
147.864 50.254 147.976 50.241 148.071 50.215 cv
148.167 50.189 148.248 50.155 148.315 50.112 cv
148.382 50.069 148.438 50.022 148.481 49.971 cv
148.525 49.92 148.559 49.868 148.583 49.816 cv
148.608 49.764 148.625 49.717 148.635 49.673 cv
148.644 49.629 148.649 49.592 148.649 49.565 cv
148.648 49.488 148.633 49.422 148.603 49.368 cv
148.574 49.315 148.536 49.269 148.49 49.234 cv
148.443 49.199 148.394 49.17 148.341 49.149 cv
148.289 49.128 148.238 49.111 148.191 49.1 cv
148.143 49.089 148.103 49.08 148.071 49.075 cv
148.058 49.072 148.04 49.069 148.017 49.065 cv
147.994 49.06 147.971 49.056 147.95 49.052 cv
147.928 49.048 147.913 49.044 147.904 49.041 cv
147.827 49.026 147.768 48.999 147.731 48.961 cv
147.693 48.922 147.674 48.88 147.674 48.832 cv
147.674 48.8 147.681 48.767 147.697 48.733 cv
147.711 48.7 147.732 48.668 147.757 48.638 cv
147.782 48.609 147.81 48.585 147.841 48.565 cv
147.879 48.541 147.919 48.523 147.961 48.512 cv
148.003 48.501 148.043 48.493 148.079 48.49 cv
148.117 48.486 148.147 48.484 148.172 48.485 cv
148.195 48.484 148.223 48.485 148.258 48.489 cv
148.293 48.492 148.33 48.499 148.369 48.509 cv
148.408 48.519 148.445 48.534 148.481 48.555 cv
148.516 48.576 148.545 48.604 148.569 48.64 cv
f
9.1435 21.328 mo
9.1427 21.273 9.1285 21.221 9.1016 21.174 cv
9.0738 21.126 9.0358 21.087 8.9882 21.057 cv
8.9414 21.027 8.8875 21.012 8.8266 21.011 cv
8.7591 21.012 8.7013 21.028 8.6523 21.06 cv
8.6046 21.092 8.5675 21.132 8.5428 21.179 cv
8.5171 21.227 8.504 21.277 8.504 21.328 cv
8.5049 21.383 8.5187 21.433 8.5468 21.481 cv
8.5735 21.529 8.6114 21.568 8.6594 21.598 cv
8.7061 21.628 8.76 21.644 8.8206 21.645 cv
8.8884 21.644 8.9462 21.627 8.995 21.596 cv
9.0429 21.564 9.0797 21.524 9.1047 21.477 cv
9.1305 21.429 9.1435 21.379 9.1435 21.328 cv
f
8.8493 22.899 mo
8.8612 22.845 8.8751 22.8 8.8901 22.766 cv
8.906 22.729 8.9309 22.702 8.9649 22.681 cv
8.9975 22.66 9.0486 22.645 9.116 22.637 cv
9.1841 22.628 9.2768 22.624 9.3933 22.624 cv
9.4409 22.625 9.4789 22.623 9.5069 22.62 cv
9.5347 22.616 9.5546 22.606 9.5665 22.59 cv
9.5784 22.574 9.5846 22.547 9.5846 22.51 cv
9.5835 22.486 9.5775 22.47 9.5665 22.46 cv
9.5557 22.45 9.5426 22.444 9.5288 22.442 cv
9.5149 22.439 9.5038 22.438 9.4947 22.439 cv
9.45 22.439 9.3933 22.44 9.3224 22.442 cv
9.2527 22.444 9.179 22.445 9.1004 22.447 cv
9.0216 22.45 8.9479 22.451 8.8782 22.454 cv
8.8082 22.456 8.7506 22.456 8.7059 22.456 cv
8.6599 22.456 8.6013 22.456 8.5315 22.454 cv
8.4607 22.451 8.387 22.45 8.3082 22.447 cv
8.2296 22.445 8.1559 22.443 8.0851 22.442 cv
8.0153 22.44 7.9567 22.439 7.9107 22.439 cv
7.8957 22.438 7.8798 22.44 7.8609 22.443 cv
7.843 22.447 7.8271 22.456 7.8132 22.473 cv
7.7993 22.491 7.7923 22.519 7.7914 22.558 cv
7.7914 22.589 7.8053 22.609 7.8319 22.616 cv
7.86 22.622 7.902 22.625 7.9586 22.624 cv
8.0423 22.623 8.116 22.625 8.1769 22.628 cv
8.2387 22.632 8.2863 22.641 8.3203 22.658 cv
8.3529 22.674 8.3711 22.701 8.3711 22.738 cv
8.3711 22.752 8.3711 22.764 8.37 22.776 cv
8.368 22.788 8.3651 22.807 8.3592 22.833 cv
7.5522 26.055 li
7.5403 26.11 7.5264 26.156 7.5113 26.193 cv
7.4952 26.228 7.4705 26.257 7.4376 26.278 cv
7.4036 26.299 7.3529 26.314 7.2851 26.323 cv
7.2174 26.332 7.1247 26.336 7.0082 26.336 cv
6.9623 26.335 6.9254 26.337 6.8973 26.34 cv
6.8696 26.344 6.8486 26.355 6.8358 26.372 cv
6.8228 26.389 6.8169 26.417 6.8169 26.455 cv
6.818 26.477 6.8239 26.492 6.8358 26.502 cv
6.8478 26.511 6.8616 26.516 6.8758 26.518 cv
6.8897 26.521 6.8996 26.521 6.9064 26.521 cv
6.9515 26.521 7.0082 26.52 7.0779 26.518 cv
7.1465 26.516 7.2202 26.514 7.2982 26.512 cv
7.3758 26.51 7.4495 26.508 7.5184 26.506 cv
7.5879 26.504 7.6449 26.504 7.6896 26.504 cv
7.7356 26.504 7.7942 26.504 7.8648 26.506 cv
7.9357 26.508 8.0114 26.51 8.0902 26.512 cv
8.1687 26.514 8.2444 26.516 8.3153 26.518 cv
8.3861 26.52 8.4448 26.521 8.4907 26.521 cv
8.5074 26.522 8.5244 26.52 8.5423 26.517 cv
8.5613 26.513 8.5772 26.504 8.5902 26.487 cv
8.6033 26.471 8.6092 26.445 8.61 26.408 cv
8.6112 26.374 8.5973 26.353 8.5704 26.345 cv
8.5423 26.338 8.4955 26.335 8.4309 26.336 cv
8.3958 26.336 8.3668 26.336 8.343 26.336 cv
8.3192 26.335 8.2943 26.334 8.2693 26.333 cv
8.2444 26.331 8.2126 26.328 8.1738 26.324 cv
8.1131 26.319 8.0723 26.308 8.0522 26.293 cv
8.0323 26.278 8.0224 26.254 8.0244 26.223 cv
8.0244 26.198 8.0272 26.175 8.0323 26.152 cv
8.0363 26.128 8.0423 26.106 8.0482 26.085 cv
8.8493 22.899 li
f
10.346 24.64 mo
10.347 24.637 10.349 24.63 10.353 24.62 cv
10.355 24.61 10.357 24.6 10.359 24.59 cv
10.361 24.581 10.363 24.575 10.363 24.573 cv
10.363 24.561 10.359 24.549 10.348 24.536 cv
10.338 24.523 10.321 24.516 10.296 24.514 cv
10.278 24.514 10.252 24.516 10.218 24.518 cv
10.184 24.52 10.144 24.523 10.101 24.527 cv
10.058 24.531 10.014 24.534 9.9701 24.538 cv
9.9253 24.542 9.8851 24.545 9.848 24.548 cv
9.8111 24.552 9.7819 24.554 9.7604 24.556 cv
9.7485 24.557 9.736 24.56 9.7212 24.563 cv
9.7074 24.567 9.6955 24.576 9.685 24.589 cv
9.6745 24.602 9.6691 24.624 9.6682 24.652 cv
9.6691 24.671 9.6745 24.685 9.685 24.694 cv
9.696 24.702 9.7099 24.707 9.7269 24.709 cv
9.7428 24.71 9.7595 24.711 9.7771 24.711 cv
9.8264 24.711 9.8655 24.713 9.8927 24.716 cv
9.9208 24.719 9.9409 24.724 9.9526 24.73 cv
9.9645 24.736 9.9721 24.742 9.9744 24.75 cv
9.9772 24.757 9.9786 24.765 9.9778 24.774 cv
9.9778 24.782 9.9752 24.796 9.971 24.818 cv
9.9667 24.84 9.9602 24.866 9.9534 24.895 cv
9.9472 24.924 9.9395 24.955 9.9318 24.984 cv
9.9242 25.014 9.9171 25.042 9.9109 25.067 cv
9.8145 25.452 li
9.8091 25.473 9.8 25.507 9.7881 25.556 cv
9.7757 25.603 9.7618 25.66 9.7448 25.725 cv
9.7283 25.79 9.7108 25.86 9.6926 25.932 cv
9.6745 26.005 9.6563 26.077 9.6388 26.148 cv
9.6215 26.219 9.6047 26.285 9.59 26.345 cv
9.5755 26.405 9.5636 26.454 9.5546 26.494 cv
9.5455 26.533 9.5398 26.556 9.5387 26.565 cv
9.5288 26.614 9.5225 26.655 9.5203 26.686 cv
9.5183 26.717 9.5169 26.745 9.5177 26.77 cv
9.5189 26.911 9.5461 27.033 9.5999 27.136 cv
9.6535 27.24 9.7269 27.319 9.8187 27.375 cv
9.9109 27.431 10.015 27.459 10.133 27.46 cv
10.238 27.459 10.343 27.438 10.446 27.396 cv
10.549 27.354 10.647 27.296 10.739 27.22 cv
10.831 27.145 10.911 27.058 10.983 26.957 cv
11.054 26.858 11.11 26.75 11.15 26.633 cv
11.19 26.517 11.211 26.397 11.212 26.272 cv
11.211 26.15 11.192 26.044 11.155 25.956 cv
11.117 25.868 11.068 25.795 11.006 25.739 cv
10.945 25.683 10.878 25.641 10.804 25.613 cv
10.731 25.586 10.658 25.573 10.584 25.573 cv
10.512 25.574 10.444 25.586 10.379 25.609 cv
10.315 25.632 10.255 25.66 10.202 25.695 cv
10.147 25.73 10.099 25.766 10.057 25.803 cv
10.346 24.64 li
cp
10.137 27.343 mo
10.068 27.342 10.01 27.323 9.9625 27.287 cv
9.9143 27.251 9.8774 27.201 9.8522 27.136 cv
9.8273 27.072 9.8145 26.999 9.8145 26.916 cv
9.8145 26.879 9.8168 26.839 9.8224 26.797 cv
9.8278 26.756 9.8363 26.706 9.848 26.651 cv
9.8602 26.595 9.876 26.526 9.8956 26.444 cv
9.9157 26.363 9.9404 26.263 9.9696 26.146 cv
9.9772 26.121 9.984 26.1 9.9905 26.085 cv
9.9959 26.07 10.005 26.053 10.017 26.036 cv
10.029 26.019 10.048 25.996 10.074 25.966 cv
10.128 25.905 10.183 25.854 10.24 25.813 cv
10.298 25.772 10.355 25.741 10.411 25.721 cv
10.468 25.701 10.521 25.69 10.572 25.69 cv
10.627 25.689 10.678 25.704 10.724 25.732 cv
10.77 25.761 10.807 25.804 10.835 25.865 cv
10.863 25.924 10.877 26.001 10.877 26.096 cv
10.877 26.14 10.872 26.197 10.861 26.265 cv
10.85 26.335 10.836 26.409 10.816 26.49 cv
10.796 26.57 10.773 26.65 10.747 26.727 cv
10.72 26.805 10.691 26.875 10.66 26.937 cv
10.635 26.989 10.603 27.039 10.566 27.087 cv
10.529 27.135 10.487 27.178 10.441 27.217 cv
10.395 27.255 10.346 27.286 10.295 27.308 cv
10.243 27.331 10.191 27.342 10.137 27.343 cv
f
79.167 22.654 mo
79.166 22.599 79.152 22.547 79.125 22.5 cv
79.097 22.452 79.059 22.413 79.011 22.383 cv
78.965 22.353 78.911 22.338 78.85 22.337 cv
78.782 22.338 78.725 22.354 78.676 22.386 cv
78.628 22.418 78.591 22.458 78.566 22.506 cv
78.54 22.553 78.527 22.603 78.527 22.654 cv
78.528 22.709 78.542 22.76 78.57 22.808 cv
78.597 22.855 78.635 22.894 78.683 22.924 cv
78.73 22.954 78.783 22.97 78.844 22.971 cv
78.912 22.97 78.97 22.953 79.018 22.922 cv
79.066 22.89 79.103 22.851 79.128 22.803 cv
79.154 22.755 79.167 22.705 79.167 22.654 cv
f
78.873 24.224 mo
78.885 24.17 78.899 24.125 78.914 24.091 cv
78.93 24.055 78.955 24.027 78.988 24.006 cv
79.021 23.985 79.072 23.97 79.14 23.962 cv
79.208 23.953 79.3 23.949 79.417 23.949 cv
79.465 23.95 79.503 23.948 79.53 23.945 cv
79.558 23.941 79.578 23.931 79.59 23.915 cv
79.602 23.899 79.608 23.872 79.608 23.835 cv
79.607 23.812 79.601 23.795 79.59 23.785 cv
79.579 23.775 79.566 23.769 79.552 23.767 cv
79.539 23.764 79.528 23.763 79.518 23.764 cv
79.474 23.764 79.417 23.765 79.346 23.767 cv
79.276 23.769 79.203 23.771 79.124 23.773 cv
79.045 23.775 78.972 23.777 78.902 23.779 cv
78.832 23.781 78.774 23.782 78.729 23.782 cv
78.684 23.782 78.625 23.781 78.555 23.779 cv
78.484 23.777 78.411 23.775 78.332 23.773 cv
78.253 23.771 78.179 23.768 78.109 23.767 cv
78.039 23.765 77.98 23.764 77.934 23.764 cv
77.919 23.763 77.904 23.765 77.885 23.768 cv
77.867 23.772 77.851 23.782 77.837 23.798 cv
77.823 23.816 77.816 23.844 77.815 23.883 cv
77.815 23.914 77.829 23.934 77.856 23.941 cv
77.884 23.947 77.925 23.95 77.982 23.949 cv
78.066 23.948 78.14 23.95 78.2 23.953 cv
78.262 23.957 78.31 23.966 78.344 23.983 cv
78.377 23.999 78.395 24.026 78.395 24.063 cv
78.395 24.077 78.395 24.09 78.394 24.102 cv
78.392 24.113 78.389 24.132 78.383 24.158 cv
77.576 27.38 li
77.564 27.435 77.55 27.481 77.535 27.518 cv
77.519 27.554 77.494 27.582 77.461 27.603 cv
77.427 27.624 77.376 27.639 77.309 27.648 cv
77.241 27.657 77.148 27.661 77.032 27.661 cv
76.986 27.66 76.949 27.662 76.921 27.665 cv
76.893 27.669 76.872 27.68 76.859 27.697 cv
76.847 27.714 76.841 27.742 76.841 27.781 cv
76.841 27.803 76.847 27.817 76.859 27.827 cv
76.871 27.836 76.885 27.842 76.899 27.843 cv
76.913 27.846 76.923 27.846 76.93 27.846 cv
76.975 27.846 77.032 27.846 77.102 27.843 cv
77.17 27.842 77.244 27.84 77.322 27.838 cv
77.399 27.836 77.473 27.834 77.542 27.832 cv
77.612 27.829 77.669 27.829 77.713 27.829 cv
77.759 27.829 77.818 27.829 77.889 27.832 cv
77.959 27.834 78.035 27.836 78.114 27.838 cv
78.192 27.84 78.268 27.842 78.339 27.843 cv
78.41 27.846 78.468 27.846 78.514 27.846 cv
78.531 27.847 78.548 27.846 78.566 27.842 cv
78.585 27.838 78.601 27.829 78.614 27.813 cv
78.627 27.797 78.633 27.77 78.634 27.733 cv
78.635 27.699 78.621 27.678 78.594 27.67 cv
78.566 27.663 78.519 27.66 78.454 27.661 cv
78.419 27.661 78.391 27.661 78.367 27.661 cv
78.343 27.66 78.318 27.659 78.293 27.658 cv
78.268 27.656 78.236 27.653 78.198 27.649 cv
78.137 27.644 78.096 27.633 78.076 27.619 cv
78.056 27.603 78.046 27.579 78.048 27.548 cv
78.048 27.524 78.051 27.5 78.056 27.477 cv
78.06 27.453 78.066 27.431 78.072 27.41 cv
78.873 24.224 li
cp
83.201 26.472 mo
83.387 26.477 79.376 26.472 83.201 26.472 cv
f
146.969 22.267 mo
146.968 22.212 146.954 22.16 146.927 22.113 cv
146.899 22.065 146.861 22.026 146.814 21.996 cv
146.767 21.966 146.713 21.951 146.652 21.95 cv
146.584 21.951 146.527 21.967 146.478 21.999 cv
146.43 22.031 146.393 22.071 146.368 22.118 cv
146.343 22.166 146.33 22.216 146.33 22.267 cv
146.33 22.322 146.344 22.372 146.372 22.42 cv
146.399 22.468 146.437 22.507 146.485 22.537 cv
146.532 22.567 146.586 22.583 146.646 22.584 cv
146.714 22.583 146.772 22.566 146.82 22.535 cv
146.868 22.503 146.905 22.463 146.93 22.415 cv
146.956 22.368 146.969 22.318 146.969 22.267 cv
f
146.674 23.837 mo
146.686 23.783 146.7 23.738 146.715 23.704 cv
146.731 23.668 146.756 23.64 146.789 23.619 cv
146.822 23.598 146.873 23.583 146.941 23.575 cv
147.009 23.566 147.101 23.562 147.218 23.562 cv
147.266 23.563 147.304 23.561 147.332 23.558 cv
147.359 23.554 147.379 23.544 147.391 23.528 cv
147.403 23.512 147.409 23.485 147.409 23.448 cv
147.408 23.424 147.402 23.408 147.391 23.398 cv
147.38 23.388 147.367 23.382 147.353 23.38 cv
147.34 23.377 147.329 23.376 147.319 23.377 cv
147.275 23.377 147.218 23.378 147.147 23.38 cv
147.077 23.382 147.004 23.383 146.925 23.385 cv
146.846 23.388 146.773 23.389 146.703 23.391 cv
146.633 23.394 146.575 23.395 146.531 23.395 cv
146.485 23.395 146.426 23.394 146.356 23.391 cv
146.285 23.389 146.212 23.388 146.133 23.385 cv
146.054 23.383 145.981 23.381 145.91 23.38 cv
145.84 23.378 145.781 23.377 145.735 23.377 cv
145.72 23.376 145.705 23.378 145.686 23.381 cv
145.668 23.385 145.652 23.395 145.638 23.412 cv
145.624 23.429 145.617 23.457 145.616 23.496 cv
145.616 23.527 145.63 23.547 145.657 23.554 cv
145.685 23.56 145.726 23.563 145.783 23.562 cv
145.867 23.561 145.941 23.563 146.002 23.566 cv
146.063 23.57 146.111 23.579 146.145 23.596 cv
146.178 23.612 146.196 23.639 146.196 23.676 cv
146.196 23.69 146.196 23.702 146.195 23.714 cv
146.193 23.726 146.19 23.745 146.184 23.771 cv
145.377 26.993 li
145.365 27.048 145.351 27.094 145.336 27.131 cv
145.32 27.166 145.295 27.195 145.262 27.216 cv
145.228 27.237 145.178 27.252 145.11 27.261 cv
145.042 27.27 144.949 27.274 144.833 27.274 cv
144.787 27.273 144.75 27.275 144.722 27.278 cv
144.694 27.282 144.673 27.293 144.66 27.31 cv
144.648 27.327 144.642 27.355 144.642 27.393 cv
144.643 27.415 144.649 27.431 144.66 27.439 cv
144.672 27.449 144.687 27.454 144.701 27.456 cv
144.714 27.459 144.724 27.459 144.731 27.459 cv
144.776 27.459 144.833 27.458 144.903 27.456 cv
144.971 27.454 145.045 27.452 145.123 27.45 cv
145.201 27.448 145.274 27.446 145.343 27.444 cv
145.413 27.442 145.47 27.442 145.514 27.442 cv
145.56 27.442 145.619 27.442 145.69 27.444 cv
145.76 27.446 145.836 27.448 145.915 27.45 cv
145.994 27.452 146.069 27.454 146.14 27.456 cv
146.211 27.458 146.269 27.459 146.315 27.459 cv
146.332 27.46 146.349 27.458 146.367 27.456 cv
146.386 27.451 146.402 27.442 146.415 27.425 cv
146.428 27.41 146.434 27.383 146.435 27.346 cv
146.436 27.312 146.422 27.291 146.395 27.283 cv
146.367 27.276 146.32 27.273 146.255 27.274 cv
146.22 27.274 146.192 27.274 146.168 27.274 cv
146.144 27.273 146.119 27.272 146.094 27.271 cv
146.069 27.269 146.037 27.266 145.999 27.262 cv
145.938 27.257 145.897 27.246 145.877 27.231 cv
145.857 27.216 145.847 27.192 145.849 27.16 cv
145.849 27.137 145.852 27.113 145.857 27.09 cv
145.861 27.066 145.867 27.044 145.873 27.023 cv
146.674 23.837 li
f
148.004 27.402 mo
148.034 27.402 148.075 27.401 148.127 27.399 cv
148.179 27.398 148.236 27.394 148.3 27.388 cv
148.364 27.382 148.428 27.373 148.493 27.361 cv
148.559 27.35 148.621 27.334 148.678 27.314 cv
148.754 27.286 148.817 27.254 148.866 27.218 cv
148.914 27.182 148.952 27.143 148.978 27.103 cv
149.004 27.062 149.022 27.023 149.032 26.984 cv
149.041 26.946 149.047 26.911 149.046 26.879 cv
149.045 26.802 149.021 26.736 148.975 26.681 cv
148.929 26.626 148.868 26.584 148.79 26.555 cv
148.712 26.526 148.624 26.511 148.527 26.511 cv
148.425 26.511 148.32 26.526 148.212 26.557 cv
148.103 26.587 147.997 26.632 147.894 26.692 cv
147.793 26.752 147.7 26.826 147.618 26.915 cv
147.535 27.003 147.471 27.105 147.421 27.222 cv
147.373 27.339 147.348 27.468 147.347 27.611 cv
147.347 27.718 147.364 27.818 147.396 27.912 cv
147.429 28.007 147.477 28.09 147.54 28.163 cv
147.603 28.235 147.683 28.293 147.776 28.334 cv
147.869 28.376 147.977 28.397 148.1 28.398 cv
148.242 28.396 148.368 28.383 148.479 28.354 cv
148.591 28.326 148.688 28.291 148.771 28.248 cv
148.853 28.205 148.922 28.161 148.976 28.117 cv
149.03 28.072 149.071 28.032 149.098 27.997 cv
149.125 27.962 149.138 27.938 149.138 27.925 cv
149.138 27.916 149.134 27.906 149.127 27.896 cv
149.12 27.884 149.111 27.875 149.1 27.867 cv
149.089 27.859 149.078 27.855 149.067 27.854 cv
149.055 27.853 149.045 27.856 149.037 27.862 cv
149.028 27.868 149.016 27.879 149 27.896 cv
148.933 27.973 148.864 28.035 148.789 28.083 cv
148.714 28.132 148.64 28.17 148.567 28.198 cv
148.493 28.225 148.424 28.244 148.361 28.256 cv
148.297 28.268 148.243 28.275 148.198 28.278 cv
148.154 28.28 148.124 28.281 148.109 28.281 cv
148.024 28.281 147.951 28.262 147.888 28.225 cv
147.826 28.187 147.777 28.132 147.743 28.056 cv
147.708 27.981 147.691 27.888 147.69 27.774 cv
147.69 27.756 147.69 27.732 147.692 27.703 cv
147.694 27.674 147.698 27.636 147.705 27.587 cv
147.712 27.54 147.724 27.478 147.74 27.402 cv
148.004 27.402 li
cp
147.774 27.285 mo
147.809 27.164 147.853 27.064 147.907 26.984 cv
147.96 26.903 148.018 26.839 148.079 26.791 cv
148.141 26.744 148.201 26.708 148.261 26.685 cv
148.32 26.661 148.374 26.645 148.42 26.638 cv
148.467 26.631 148.503 26.627 148.527 26.628 cv
148.589 26.628 148.645 26.638 148.696 26.658 cv
148.748 26.677 148.789 26.706 148.819 26.743 cv
148.85 26.781 148.865 26.826 148.866 26.879 cv
148.865 26.946 148.847 27.003 148.813 27.05 cv
148.778 27.097 148.733 27.135 148.676 27.165 cv
148.619 27.194 148.557 27.217 148.49 27.234 cv
148.422 27.251 148.355 27.263 148.288 27.27 cv
148.222 27.277 148.162 27.281 148.107 27.283 cv
148.053 27.285 148.009 27.285 147.979 27.285 cv
147.774 27.285 li
f
.567 lw
24.57 33.931 mo
24.57 25.221 li
@
24.556 22.15 mo
22.961 27.733 li
24.024 26.935 25.088 26.935 26.151 27.733 cv
24.556 22.15 li
ef
134.945 33.931 mo
134.945 25.221 li
@
134.931 22.15 mo
133.336 27.733 li
134.399 26.935 135.463 26.935 136.526 27.733 cv
134.931 22.15 li
ef
67.398 18.847 mo
79.45 18.847 li
@
82.521 18.833 mo
76.938 17.238 li
77.736 18.301 77.736 19.365 76.938 20.428 cv
82.521 18.833 li
ef
3.3376 18.847 mo
9.1702 18.847 li
@
12.241 18.834 mo
6.6582 17.239 li
7.4558 18.302 7.4558 19.366 6.6582 20.429 cv
12.241 18.834 li
ef
140.15 18.847 mo
145.983 18.847 li
@
149.053 18.833 mo
143.47 17.238 li
144.268 18.301 144.268 19.365 143.47 20.428 cv
149.053 18.833 li
ef
93.145 10.869 mo
93.145 11.001 93.135 11.107 93.114 11.185 cv
93.089 11.279 93.057 11.36 93.017 11.427 cv
92.972 11.503 92.911 11.578 92.835 11.653 cv
92.759 11.727 92.662 11.804 92.542 11.882 cv
92.446 11.754 li
92.508 11.704 92.561 11.648 92.604 11.584 cv
92.646 11.521 92.683 11.444 92.713 11.353 cv
92.744 11.262 92.765 11.168 92.777 11.074 cv
92.789 10.978 92.796 10.91 92.796 10.869 cv
93.145 10.869 li
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
